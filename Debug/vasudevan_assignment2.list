
vasudevan_assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd0  08005bd0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd8  08005bd8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200001dc  08005dbc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005dbc  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb9a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fc5  00000000  00000000  0002fda6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00031d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00032c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022006  00000000  00000000  00033a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b0fb  00000000  00000000  00055a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cab69  00000000  00000000  00060b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b6f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000491c  00000000  00000000  0012b770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005968 	.word	0x08005968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005968 	.word	0x08005968

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <setPWMandTurnON>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWMandTurnON(TIM_HandleTypeDef* htim1, int32_t pwmPeriod) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b098      	sub	sp, #96	; 0x60
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
	htim1->Instance = TIM1;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a3a      	ldr	r2, [pc, #232]	; (8000668 <setPWMandTurnON+0xf8>)
 800057e:	601a      	str	r2, [r3, #0]
	htim1->Init.Prescaler = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]
	htim1->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
	htim1->Init.Period = pwmPeriod;
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60da      	str	r2, [r3, #12]
	htim1->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
	htim1->Init.RepetitionCounter = 0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_PWM_Init(&*htim1) != HAL_OK) {
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f002 fa07 	bl	80029b2 <HAL_TIM_PWM_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <setPWMandTurnON+0x3e>
		Error_Handler();
 80005aa:	f000 fb4d 	bl	8000c48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&*htim1, &sMasterConfig)
 80005ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005be:	4619      	mov	r1, r3
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f003 f82f 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <setPWMandTurnON+0x60>
			!= HAL_OK) {
		Error_Handler();
 80005cc:	f000 fb3c 	bl	8000c48 <Error_Handler>
	}
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&*htim1, TIM_CHANNEL_1);
 80005d0:	2100      	movs	r1, #0
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f002 fa22 	bl	8002a1c <HAL_TIM_PWM_Stop>
	/*************************************/
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d8:	2360      	movs	r3, #96	; 0x60
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = pwmPeriod / 2;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	0fda      	lsrs	r2, r3, #31
 80005e0:	4413      	add	r3, r2
 80005e2:	105b      	asrs	r3, r3, #1
 80005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e6:	2300      	movs	r3, #0
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ea:	2300      	movs	r3, #0
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005f6:	2300      	movs	r3, #0
 80005f8:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&*htim1, &sConfigOC, TIM_CHANNEL_1)
 80005fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005fe:	2200      	movs	r2, #0
 8000600:	4619      	mov	r1, r3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f002 fa6a 	bl	8002adc <HAL_TIM_PWM_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <setPWMandTurnON+0xa2>
			!= HAL_OK) {
		Error_Handler();
 800060e:	f000 fb1b 	bl	8000c48 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.DeadTime = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2Filter = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&*htim1, &sBreakDeadTimeConfig)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f003 f851 	bl	80036f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <setPWMandTurnON+0xe8>
			!= HAL_OK) {
		Error_Handler();
 8000654:	f000 faf8 	bl	8000c48 <Error_Handler>
	}
	HAL_TIMEx_PWMN_Start(&*htim1, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f002 ffb2 	bl	80035c4 <HAL_TIMEx_PWMN_Start>
}
 8000660:	bf00      	nop
 8000662:	3760      	adds	r7, #96	; 0x60
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40012c00 	.word	0x40012c00

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fcf0 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f80a 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f966 	bl	8000948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067c:	f000 f934 	bl	80008e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000680:	f000 f886 	bl	8000790 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  passcodeMatch();// function call to check the password matching
 8000684:	f000 f9aa 	bl	80009dc <passcodeMatch>
 8000688:	e7fc      	b.n	8000684 <main+0x18>
	...

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b0ac      	sub	sp, #176	; 0xb0
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000696:	2244      	movs	r2, #68	; 0x44
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fee6 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2254      	movs	r2, #84	; 0x54
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fed8 	bl	800446c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006bc:	f000 ffc4 	bl	8001648 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006c0:	4b32      	ldr	r3, [pc, #200]	; (800078c <SystemClock_Config+0x100>)
 80006c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006c6:	4a31      	ldr	r2, [pc, #196]	; (800078c <SystemClock_Config+0x100>)
 80006c8:	f023 0318 	bic.w	r3, r3, #24
 80006cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006d0:	2314      	movs	r3, #20
 80006d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e4:	2360      	movs	r3, #96	; 0x60
 80006e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006fc:	2310      	movs	r3, #16
 80006fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000702:	2307      	movs	r3, #7
 8000704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f809 	bl	8001730 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000724:	f000 fa90 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2303      	movs	r3, #3
 800072e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800073c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fc14 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074e:	f000 fa7b 	bl	8000c48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000752:	2302      	movs	r3, #2
 8000754:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fe0b 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000768:	f000 fa6e 	bl	8000c48 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000770:	f000 ff88 	bl	8001684 <HAL_PWREx_ControlVoltageScaling>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800077a:	f000 fa65 	bl	8000c48 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800077e:	f001 ffed 	bl	800275c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000782:	bf00      	nop
 8000784:	37b0      	adds	r7, #176	; 0xb0
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b09a      	sub	sp, #104	; 0x68
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	222c      	movs	r2, #44	; 0x2c
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fe4e 	bl	800446c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <MX_TIM1_Init+0x150>)
 80007d2:	4a44      	ldr	r2, [pc, #272]	; (80008e4 <MX_TIM1_Init+0x154>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <MX_TIM1_Init+0x150>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <MX_TIM1_Init+0x150>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80007e2:	4b3f      	ldr	r3, [pc, #252]	; (80008e0 <MX_TIM1_Init+0x150>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <MX_TIM1_Init+0x150>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ee:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <MX_TIM1_Init+0x150>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f4:	4b3a      	ldr	r3, [pc, #232]	; (80008e0 <MX_TIM1_Init+0x150>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007fa:	4839      	ldr	r0, [pc, #228]	; (80008e0 <MX_TIM1_Init+0x150>)
 80007fc:	f002 f8ae 	bl	800295c <HAL_TIM_Base_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000806:	f000 fa1f 	bl	8000c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000810:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000814:	4619      	mov	r1, r3
 8000816:	4832      	ldr	r0, [pc, #200]	; (80008e0 <MX_TIM1_Init+0x150>)
 8000818:	f002 fa78 	bl	8002d0c <HAL_TIM_ConfigClockSource>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000822:	f000 fa11 	bl	8000c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000826:	482e      	ldr	r0, [pc, #184]	; (80008e0 <MX_TIM1_Init+0x150>)
 8000828:	f002 f8c3 	bl	80029b2 <HAL_TIM_PWM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000832:	f000 fa09 	bl	8000c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000842:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000846:	4619      	mov	r1, r3
 8000848:	4825      	ldr	r0, [pc, #148]	; (80008e0 <MX_TIM1_Init+0x150>)
 800084a:	f002 feeb 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000854:	f000 f9f8 	bl	8000c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000858:	2360      	movs	r3, #96	; 0x60
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000864:	2300      	movs	r3, #0
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_TIM1_Init+0x150>)
 800087e:	f002 f92d 	bl	8002adc <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000888:	f000 f9de 	bl	8000c48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM1_Init+0x150>)
 80008c2:	f002 ff15 	bl	80036f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80008cc:	f000 f9bc 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM1_Init+0x150>)
 80008d2:	f000 fa05 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 80008d6:	bf00      	nop
 80008d8:	3768      	adds	r7, #104	; 0x68
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000204 	.word	0x20000204
 80008e4:	40012c00 	.word	0x40012c00

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800092c:	f002 ff7d 	bl	800382a <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f987 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000244 	.word	0x20000244
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_GPIO_Init+0x8c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_GPIO_Init+0x8c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_GPIO_Init+0x8c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_GPIO_Init+0x8c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <MX_GPIO_Init+0x8c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_GPIO_Init+0x8c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_GPIO_Init+0x8c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <MX_GPIO_Init+0x8c>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_GPIO_Init+0x8c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2138      	movs	r1, #56	; 0x38
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0x90>)
 80009ac:	f000 fe34 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = LD3_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80009b0:	2338      	movs	r3, #56	; 0x38
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0x90>)
 80009c8:	f000 fcbc 	bl	8001344 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000400 	.word	0x48000400

080009dc <passcodeMatch>:
 *              screen
 * PARAMETERS : none
 * RETURNS    : Nothing
 */
void passcodeMatch()
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
	//storing authorised passcodes to the array
	int16_t passCodes []={0,1210,1282,2283,5432,2345,9999,7777,6789,9876,2468};
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <passcodeMatch+0x98>)
 80009e4:	f107 0408 	add.w	r4, r7, #8
 80009e8:	461d      	mov	r5, r3
 80009ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009f2:	6020      	str	r0, [r4, #0]
 80009f4:	3404      	adds	r4, #4
 80009f6:	8021      	strh	r1, [r4, #0]
	int16_t passWord=0;//user entered data
 80009f8:	2300      	movs	r3, #0
 80009fa:	80fb      	strh	r3, [r7, #6]
	int8_t i=0;// counter for for loop
 80009fc:	2300      	movs	r3, #0
 80009fe:	77fb      	strb	r3, [r7, #31]
	int8_t flag=0;//flag to determine the corresponding functions to be done
 8000a00:	2300      	movs	r3, #0
 8000a02:	77bb      	strb	r3, [r7, #30]
    printf("Enter the Passcode to unlock the facility door:\n");
 8000a04:	481c      	ldr	r0, [pc, #112]	; (8000a78 <passcodeMatch+0x9c>)
 8000a06:	f003 fd95 	bl	8004534 <puts>
    scanf("%d",&passWord);
 8000a0a:	1dbb      	adds	r3, r7, #6
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	481b      	ldr	r0, [pc, #108]	; (8000a7c <passcodeMatch+0xa0>)
 8000a10:	f003 fd98 	bl	8004544 <iscanf>
    for (i=1;i<=10;i++)
 8000a14:	2301      	movs	r3, #1
 8000a16:	77fb      	strb	r3, [r7, #31]
 8000a18:	e014      	b.n	8000a44 <passcodeMatch+0x68>
	{
	 if( passWord==passCodes[i])//checks passcode matching
 8000a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	f107 0220 	add.w	r2, r7, #32
 8000a24:	4413      	add	r3, r2
 8000a26:	f933 2c18 	ldrsh.w	r2, [r3, #-24]
 8000a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d102      	bne.n	8000a38 <passcodeMatch+0x5c>
	 {
	  flag=1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	77bb      	strb	r3, [r7, #30]
	  break;
 8000a36:	e009      	b.n	8000a4c <passcodeMatch+0x70>
    for (i=1;i<=10;i++)
 8000a38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	77fb      	strb	r3, [r7, #31]
 8000a44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a48:	2b0a      	cmp	r3, #10
 8000a4a:	dde6      	ble.n	8000a1a <passcodeMatch+0x3e>
	 }

	}
	if(flag==0)
 8000a4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d105      	bne.n	8000a60 <passcodeMatch+0x84>
	{
	 printf("Access denied\n");
 8000a54:	480a      	ldr	r0, [pc, #40]	; (8000a80 <passcodeMatch+0xa4>)
 8000a56:	f003 fd6d 	bl	8004534 <puts>
     deniedLed();// function call to perform tasks when access is denied
 8000a5a:	f000 f839 	bl	8000ad0 <deniedLed>
	else
	{
	printf("Access granted\n");
    grantedLed();// function call to perform tasks when access is granted
    }
}
 8000a5e:	e004      	b.n	8000a6a <passcodeMatch+0x8e>
	printf("Access granted\n");
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <passcodeMatch+0xa8>)
 8000a62:	f003 fd67 	bl	8004534 <puts>
    grantedLed();// function call to perform tasks when access is granted
 8000a66:	f000 f80f 	bl	8000a88 <grantedLed>
}
 8000a6a:	bf00      	nop
 8000a6c:	3720      	adds	r7, #32
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bdb0      	pop	{r4, r5, r7, pc}
 8000a72:	bf00      	nop
 8000a74:	080059d4 	.word	0x080059d4
 8000a78:	08005980 	.word	0x08005980
 8000a7c:	080059b0 	.word	0x080059b0
 8000a80:	080059b4 	.word	0x080059b4
 8000a84:	080059c4 	.word	0x080059c4

08000a88 <grantedLed>:
 *             2 seconds
 * PARAMETERS : none
 * RETURNS    : None
 */
void grantedLed()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);//setting led
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2110      	movs	r1, #16
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <grantedLed+0x40>)
 8000a94:	f000 fdc0 	bl	8001618 <HAL_GPIO_WritePin>
 int32_t pwmPeriod=1e9/(400*250);//pwm frequency setting
 8000a98:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a9c:	607b      	str	r3, [r7, #4]
 setPWMandTurnON(&htim1, pwmPeriod);//turns on speaker
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <grantedLed+0x44>)
 8000aa2:	f7ff fd65 	bl	8000570 <setPWMandTurnON>
 HAL_Delay(2000);
 8000aa6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aaa:	f000 fb43 	bl	8001134 <HAL_Delay>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);//resetting led
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <grantedLed+0x40>)
 8000ab4:	f000 fdb0 	bl	8001618 <HAL_GPIO_WritePin>
 setPWMandTurnON(&htim1, 0);//turn off speaker
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <grantedLed+0x44>)
 8000abc:	f7ff fd58 	bl	8000570 <setPWMandTurnON>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	20000204 	.word	0x20000204

08000ad0 <deniedLed>:
 *             sos auditory signal to speaker
 * PARAMETERS : none
 * RETURNS    : None
 */
void deniedLed()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <deniedLed+0x28>)
 8000ada:	f000 fd9d 	bl	8001618 <HAL_GPIO_WritePin>
 sos();
 8000ade:	f000 f80f 	bl	8000b00 <sos>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <deniedLed+0x28>)
 8000ae8:	f000 fd96 	bl	8001618 <HAL_GPIO_WritePin>
 setPWMandTurnON(&htim1, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <deniedLed+0x2c>)
 8000af0:	f7ff fd3e 	bl	8000570 <setPWMandTurnON>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	48000400 	.word	0x48000400
 8000afc:	20000204 	.word	0x20000204

08000b00 <sos>:
 *             via PA7
 * PARAMETERS : none
 * RETURNS    : None
 */
void sos()
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
int32_t pwmPeriod=1e9/(640*250);//pwm frequency determination
 8000b06:	f641 036a 	movw	r3, #6250	; 0x186a
 8000b0a:	607b      	str	r3, [r7, #4]
//S
setPWMandTurnON(&htim1, pwmPeriod);
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	484d      	ldr	r0, [pc, #308]	; (8000c44 <sos+0x144>)
 8000b10:	f7ff fd2e 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000b14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b18:	f000 fb0c 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4849      	ldr	r0, [pc, #292]	; (8000c44 <sos+0x144>)
 8000b20:	f7ff fd26 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b28:	f000 fb04 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, pwmPeriod);
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	4845      	ldr	r0, [pc, #276]	; (8000c44 <sos+0x144>)
 8000b30:	f7ff fd1e 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b38:	f000 fafc 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4841      	ldr	r0, [pc, #260]	; (8000c44 <sos+0x144>)
 8000b40:	f7ff fd16 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b48:	f000 faf4 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, pwmPeriod);
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	483d      	ldr	r0, [pc, #244]	; (8000c44 <sos+0x144>)
 8000b50:	f7ff fd0e 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b58:	f000 faec 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4839      	ldr	r0, [pc, #228]	; (8000c44 <sos+0x144>)
 8000b60:	f7ff fd06 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b68:	f000 fae4 	bl	8001134 <HAL_Delay>
HAL_Delay(1500);// sos for 's' ends
 8000b6c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b70:	f000 fae0 	bl	8001134 <HAL_Delay>
//code for 'o'
setPWMandTurnON(&htim1, pwmPeriod);
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	4833      	ldr	r0, [pc, #204]	; (8000c44 <sos+0x144>)
 8000b78:	f7ff fcfa 	bl	8000570 <setPWMandTurnON>
HAL_Delay(1500);
 8000b7c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b80:	f000 fad8 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	482f      	ldr	r0, [pc, #188]	; (8000c44 <sos+0x144>)
 8000b88:	f7ff fcf2 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000b8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b90:	f000 fad0 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, pwmPeriod);
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	482b      	ldr	r0, [pc, #172]	; (8000c44 <sos+0x144>)
 8000b98:	f7ff fcea 	bl	8000570 <setPWMandTurnON>
HAL_Delay(1500);
 8000b9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ba0:	f000 fac8 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4827      	ldr	r0, [pc, #156]	; (8000c44 <sos+0x144>)
 8000ba8:	f7ff fce2 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb0:	f000 fac0 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, pwmPeriod);
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	4823      	ldr	r0, [pc, #140]	; (8000c44 <sos+0x144>)
 8000bb8:	f7ff fcda 	bl	8000570 <setPWMandTurnON>
HAL_Delay(1500);
 8000bbc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000bc0:	f000 fab8 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	481f      	ldr	r0, [pc, #124]	; (8000c44 <sos+0x144>)
 8000bc8:	f7ff fcd2 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000bcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd0:	f000 fab0 	bl	8001134 <HAL_Delay>
HAL_Delay(1500);//sos code for 'o' ends
 8000bd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000bd8:	f000 faac 	bl	8001134 <HAL_Delay>
//sos code for 's'
setPWMandTurnON(&htim1, pwmPeriod);
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4819      	ldr	r0, [pc, #100]	; (8000c44 <sos+0x144>)
 8000be0:	f7ff fcc6 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be8:	f000 faa4 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	4815      	ldr	r0, [pc, #84]	; (8000c44 <sos+0x144>)
 8000bf0:	f7ff fcbe 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf8:	f000 fa9c 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, pwmPeriod);
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	4811      	ldr	r0, [pc, #68]	; (8000c44 <sos+0x144>)
 8000c00:	f7ff fcb6 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000c04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c08:	f000 fa94 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <sos+0x144>)
 8000c10:	f7ff fcae 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000c14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c18:	f000 fa8c 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, pwmPeriod);
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <sos+0x144>)
 8000c20:	f7ff fca6 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000c24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c28:	f000 fa84 	bl	8001134 <HAL_Delay>
setPWMandTurnON(&htim1, 0);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <sos+0x144>)
 8000c30:	f7ff fc9e 	bl	8000570 <setPWMandTurnON>
HAL_Delay(500);
 8000c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c38:	f000 fa7c 	bl	8001134 <HAL_Delay>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000204 	.word	0x20000204

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_TIM_Base_MspInit+0x38>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d10b      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_TIM_MspPostInit+0x68>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d11d      	bne.n	8000d3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f000 fb03 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012c00 	.word	0x40012c00
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a20      	ldr	r2, [pc, #128]	; (8000df0 <HAL_UART_MspInit+0xa0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d13a      	bne.n	8000de8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_UART_MspInit+0xa4>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_UART_MspInit+0xa4>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_UART_MspInit+0xa4>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_UART_MspInit+0xa4>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <HAL_UART_MspInit+0xa4>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0xa4>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000da2:	2304      	movs	r3, #4
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db2:	2307      	movs	r3, #7
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f000 fac0 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f000 faae 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004400 	.word	0x40004400
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4c:	f000 f954 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x50>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x16>
		heap_end = &end;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <_sbrk+0x50>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <_sbrk+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <_sbrk+0x50>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <_sbrk+0x50>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	466a      	mov	r2, sp
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d907      	bls.n	8000e8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e7e:	f003 facb 	bl	8004418 <__errno>
 8000e82:	4602      	mov	r2, r0
 8000e84:	230c      	movs	r3, #12
 8000e86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	e006      	b.n	8000e9c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <_sbrk+0x50>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <_sbrk+0x50>)
 8000e98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200001f8 	.word	0x200001f8
 8000ea8:	200002d0 	.word	0x200002d0

08000eac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <SystemInit+0x64>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a16      	ldr	r2, [pc, #88]	; (8000f10 <SystemInit+0x64>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <SystemInit+0x68>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <SystemInit+0x68>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <SystemInit+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <SystemInit+0x68>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <SystemInit+0x68>)
 8000ed8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000edc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ee0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <SystemInit+0x68>)
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <SystemInit+0x68>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <SystemInit+0x68>)
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <SystemInit+0x68>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SystemInit+0x64>)
 8000efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f02:	609a      	str	r2, [r3, #8]
#endif
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	40021000 	.word	0x40021000

08000f18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f1e:	e003      	b.n	8000f28 <LoopCopyDataInit>

08000f20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f26:	3104      	adds	r1, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f30:	d3f6      	bcc.n	8000f20 <CopyDataInit>
	ldr	r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f34:	e002      	b.n	8000f3c <LoopFillZerobss>

08000f36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f38:	f842 3b04 	str.w	r3, [r2], #4

08000f3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <LoopForever+0x16>)
	cmp	r2, r3
 8000f3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f40:	d3f9      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f42:	f7ff ffb3 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f46:	f003 fa6d 	bl	8004424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4a:	f7ff fb8f 	bl	800066c <main>

08000f4e <LoopForever>:

LoopForever:
    b LoopForever
 8000f4e:	e7fe      	b.n	8000f4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f50:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f54:	08005be0 	.word	0x08005be0
	ldr	r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f5c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8000f60:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8000f64:	200002cc 	.word	0x200002cc

08000f68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC1_IRQHandler>
	...

08000f6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000f78:	2301      	movs	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <_read+0x38>)
 8000f88:	f002 fd30 	bl	80039ec <HAL_UART_Receive>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	607b      	str	r3, [r7, #4]

	return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000244 	.word	0x20000244

08000fa8 <_write>:

int _write(int file, char *ptr, int len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <_write+0x40>)
 8000fc4:	f002 fc7f 	bl	80038c6 <HAL_UART_Transmit>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d002      	beq.n	8000fd8 <_write+0x30>
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d101      	bne.n	8000fdc <_write+0x34>
	{
		Error_Handler();
 8000fd8:	f7ff fe36 	bl	8000c48 <Error_Handler>
	}

	return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000244 	.word	0x20000244

08000fec <_close>:



int _close(int file)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001014:	605a      	str	r2, [r3, #4]
	return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_isatty>:

int _isatty(int file)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103a:	b480      	push	{r7}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
	return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f93c 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f80d 	bl	8001084 <HAL_InitTick>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	e001      	b.n	800107a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001076:	f7ff fdef 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107a:	79fb      	ldrb	r3, [r7, #7]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_InitTick+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d022      	beq.n	80010de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_InitTick+0x6c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_InitTick+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f93c 	bl	800132a <HAL_SYSTICK_Config>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10f      	bne.n	80010d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	d809      	bhi.n	80010d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010be:	2200      	movs	r2, #0
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295
 80010c6:	f000 f914 	bl	80012f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_InitTick+0x70>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e004      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <HAL_IncTick+0x1c>)
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	200002c4 	.word	0x200002c4
 8001118:	20000008 	.word	0x20000008

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200002c4 	.word	0x200002c4

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d004      	beq.n	8001158 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_Delay+0x40>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001158:	bf00      	nop
 800115a:	f7ff ffdf 	bl	800111c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	429a      	cmp	r2, r3
 8001168:	d8f7      	bhi.n	800115a <HAL_Delay+0x26>
  {
  }
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff5c 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffb0 	bl	8001298 <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e148      	b.n	80015e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 813a 	beq.w	80015e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x38>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b12      	cmp	r3, #18
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	6939      	ldr	r1, [r7, #16]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d00b      	beq.n	8001418 <HAL_GPIO_Init+0xd4>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800140c:	2b11      	cmp	r3, #17
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d130      	bne.n	800147a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144e:	2201      	movs	r2, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 0201 	and.w	r2, r3, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8094 	beq.w	80015e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b8:	4b52      	ldr	r3, [pc, #328]	; (8001604 <HAL_GPIO_Init+0x2c0>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014bc:	4a51      	ldr	r2, [pc, #324]	; (8001604 <HAL_GPIO_Init+0x2c0>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6613      	str	r3, [r2, #96]	; 0x60
 80014c4:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <HAL_GPIO_Init+0x2c0>)
 80014c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014d0:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <HAL_GPIO_Init+0x2c4>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014fa:	d00d      	beq.n	8001518 <HAL_GPIO_Init+0x1d4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a43      	ldr	r2, [pc, #268]	; (800160c <HAL_GPIO_Init+0x2c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x1d0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a42      	ldr	r2, [pc, #264]	; (8001610 <HAL_GPIO_Init+0x2cc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_GPIO_Init+0x1cc>
 800150c:	2302      	movs	r3, #2
 800150e:	e004      	b.n	800151a <HAL_GPIO_Init+0x1d6>
 8001510:	2307      	movs	r3, #7
 8001512:	e002      	b.n	800151a <HAL_GPIO_Init+0x1d6>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_GPIO_Init+0x1d6>
 8001518:	2300      	movs	r3, #0
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	f002 0203 	and.w	r2, r2, #3
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	4093      	lsls	r3, r2
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800152a:	4937      	ldr	r1, [pc, #220]	; (8001608 <HAL_GPIO_Init+0x2c4>)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155c:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001562:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001586:	4a23      	ldr	r2, [pc, #140]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b0:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f47f aeaf 	bne.w	8001354 <HAL_GPIO_Init+0x10>
  }
}
 80015f6:	bf00      	nop
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	48000400 	.word	0x48000400
 8001610:	48000800 	.word	0x48000800
 8001614:	40010400 	.word	0x40010400

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001634:	e002      	b.n	800163c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40007000 	.word	0x40007000

08001668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_PWREx_GetVoltageRange+0x18>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40007000 	.word	0x40007000

08001684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001692:	d130      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800169c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a0:	d038      	beq.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2232      	movs	r2, #50	; 0x32
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0c9b      	lsrs	r3, r3, #18
 80016c4:	3301      	adds	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c8:	e002      	b.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016dc:	d102      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f2      	bne.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f0:	d110      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e00f      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001702:	d007      	beq.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800170c:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83

08001730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	f000 bc11 	b.w	8001f66 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001744:	4ba0      	ldr	r3, [pc, #640]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174e:	4b9e      	ldr	r3, [pc, #632]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80e4 	beq.w	800192e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <HAL_RCC_OscConfig+0x4c>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	f040 808b 	bne.w	800188a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 8087 	bne.w	800188a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800177c:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_OscConfig+0x64>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e3e8      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_RCC_OscConfig+0x7e>
 80017a4:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ac:	e005      	b.n	80017ba <HAL_RCC_OscConfig+0x8a>
 80017ae:	4b86      	ldr	r3, [pc, #536]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d223      	bcs.n	8001806 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fd78 	bl	80022b8 <RCC_SetFlashLatencyFromMSIRange>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e3c9      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d2:	4b7d      	ldr	r3, [pc, #500]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7c      	ldr	r2, [pc, #496]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b7a      	ldr	r3, [pc, #488]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4977      	ldr	r1, [pc, #476]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f0:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	4972      	ldr	r1, [pc, #456]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
 8001804:	e025      	b.n	8001852 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001806:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6f      	ldr	r2, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	496a      	ldr	r1, [pc, #424]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001824:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	4965      	ldr	r1, [pc, #404]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fd38 	bl	80022b8 <RCC_SetFlashLatencyFromMSIRange>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e389      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001852:	f000 fc6f 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8001856:	4601      	mov	r1, r0
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001864:	5cd3      	ldrb	r3, [r2, r3]
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	fa21 f303 	lsr.w	r3, r1, r3
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_RCC_OscConfig+0x2a0>)
 8001870:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001872:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <HAL_RCC_OscConfig+0x2a4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc04 	bl	8001084 <HAL_InitTick>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d052      	beq.n	800192c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	e36d      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d032      	beq.n	80018f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001892:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a4c      	ldr	r2, [pc, #304]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189e:	f7ff fc3d 	bl	800111c <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a6:	f7ff fc39 	bl	800111c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e356      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a3f      	ldr	r2, [pc, #252]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	493a      	ldr	r1, [pc, #232]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	4935      	ldr	r1, [pc, #212]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
 80018f6:	e01a      	b.n	800192e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001904:	f7ff fc0a 	bl	800111c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190c:	f7ff fc06 	bl	800111c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e323      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1dc>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d073      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d005      	beq.n	800194c <HAL_RCC_OscConfig+0x21c>
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d10e      	bne.n	8001964 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d063      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d15f      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e300      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x24c>
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0x288>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x270>
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0x288>
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_RCC_OscConfig+0x298>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01b      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fbac 	bl	800111c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c6:	e010      	b.n	80019ea <HAL_RCC_OscConfig+0x2ba>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	080059f8 	.word	0x080059f8
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fba0 	bl	800111c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e2bd      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	4baf      	ldr	r3, [pc, #700]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x2a8>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff fb90 	bl	800111c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff fb8c 	bl	800111c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e2a9      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a12:	4ba5      	ldr	r3, [pc, #660]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2d0>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d060      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_OscConfig+0x310>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d116      	bne.n	8001a6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a40:	4b99      	ldr	r3, [pc, #612]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x328>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e286      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b93      	ldr	r3, [pc, #588]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	4990      	ldr	r1, [pc, #576]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6c:	e040      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d023      	beq.n	8001abe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a76:	4b8c      	ldr	r3, [pc, #560]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a8b      	ldr	r2, [pc, #556]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff fb4b 	bl	800111c <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fb47 	bl	800111c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e264      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	4b82      	ldr	r3, [pc, #520]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	4b7f      	ldr	r3, [pc, #508]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	497c      	ldr	r1, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e018      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001abe:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a79      	ldr	r2, [pc, #484]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb27 	bl	800111c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fb23 	bl	800111c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e240      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae4:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	4a67      	ldr	r2, [pc, #412]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff fb02 	bl	800111c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fafe 	bl	800111c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e21b      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ef      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3ec>
 8001b3c:	e01b      	b.n	8001b76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b44:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fae5 	bl	800111c <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b56:	f7ff fae1 	bl	800111c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1fe      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b68:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ef      	bne.n	8001b56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80a6 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10d      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a43      	ldr	r2, [pc, #268]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba0:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bac:	2301      	movs	r3, #1
 8001bae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <HAL_RCC_OscConfig+0x57c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d118      	bne.n	8001bee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_OscConfig+0x57c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	; (8001cac <HAL_RCC_OscConfig+0x57c>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff faa8 	bl	800111c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd0:	f7ff faa4 	bl	800111c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1c1      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_OscConfig+0x57c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4d8>
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c06:	e024      	b.n	8001c52 <HAL_RCC_OscConfig+0x522>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d110      	bne.n	8001c32 <HAL_RCC_OscConfig+0x502>
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c30:	e00f      	b.n	8001c52 <HAL_RCC_OscConfig+0x522>
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c48:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c4a:	f023 0304 	bic.w	r3, r3, #4
 8001c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fa5f 	bl	800111c <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff fa5b 	bl	800111c <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e176      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0ed      	beq.n	8001c62 <HAL_RCC_OscConfig+0x532>
 8001c86:	e01a      	b.n	8001cbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff fa48 	bl	800111c <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c8e:	e00f      	b.n	8001cb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff fa44 	bl	800111c <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d906      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e15f      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb0:	4baa      	ldr	r3, [pc, #680]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e8      	bne.n	8001c90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d105      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc4:	4ba5      	ldr	r3, [pc, #660]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	4aa4      	ldr	r2, [pc, #656]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d03c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ce4:	4b9d      	ldr	r3, [pc, #628]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cea:	4a9c      	ldr	r2, [pc, #624]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fa12 	bl	800111c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfc:	f7ff fa0e 	bl	800111c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e12b      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d0e:	4b93      	ldr	r3, [pc, #588]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ef      	beq.n	8001cfc <HAL_RCC_OscConfig+0x5cc>
 8001d1c:	e01b      	b.n	8001d56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d1e:	4b8f      	ldr	r3, [pc, #572]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d24:	4a8d      	ldr	r2, [pc, #564]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f9f5 	bl	800111c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d36:	f7ff f9f1 	bl	800111c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e10e      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d48:	4b84      	ldr	r3, [pc, #528]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ef      	bne.n	8001d36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8102 	beq.w	8001f64 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	f040 80c5 	bne.w	8001ef4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0203 	and.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d12c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d123      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d113      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d109      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d067      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d062      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dde:	4b5f      	ldr	r3, [pc, #380]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0bb      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dee:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a5a      	ldr	r2, [pc, #360]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dfa:	f7ff f98f 	bl	800111c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff f98b 	bl	800111c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0a8      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e14:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e20:	4b4e      	ldr	r3, [pc, #312]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <HAL_RCC_OscConfig+0x830>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e30:	3a01      	subs	r2, #1
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3a:	0212      	lsls	r2, r2, #8
 8001e3c:	4311      	orrs	r1, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e42:	0852      	lsrs	r2, r2, #1
 8001e44:	3a01      	subs	r2, #1
 8001e46:	0552      	lsls	r2, r2, #21
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e4e:	0852      	lsrs	r2, r2, #1
 8001e50:	3a01      	subs	r2, #1
 8001e52:	0652      	lsls	r2, r2, #25
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e5a:	06d2      	lsls	r2, r2, #27
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	493f      	ldr	r1, [pc, #252]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e64:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a3c      	ldr	r2, [pc, #240]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e70:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a39      	ldr	r2, [pc, #228]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e7c:	f7ff f94e 	bl	800111c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f94a 	bl	800111c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e067      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea2:	e05f      	b.n	8001f64 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e05e      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d157      	bne.n	8001f64 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a28      	ldr	r2, [pc, #160]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a25      	ldr	r2, [pc, #148]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ecc:	f7ff f926 	bl	800111c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff f922 	bl	800111c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e03f      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x7a4>
 8001ef2:	e037      	b.n	8001f64 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d02d      	beq.n	8001f56 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f04:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001f18:	f023 0303 	bic.w	r3, r3, #3
 8001f1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001f24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f8f5 	bl	800111c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f8f1 	bl	800111c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e00e      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_RCC_OscConfig+0x82c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x806>
 8001f54:	e006      	b.n	8001f64 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e005      	b.n	8001f66 <HAL_RCC_OscConfig+0x836>
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0c8      	b.n	8002116 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b66      	ldr	r3, [pc, #408]	; (8002120 <HAL_RCC_ClockConfig+0x1b0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_ClockConfig+0x1b0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4961      	ldr	r1, [pc, #388]	; (8002120 <HAL_RCC_ClockConfig+0x1b0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_RCC_ClockConfig+0x1b0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b0      	b.n	8002116 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d04c      	beq.n	800205a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d121      	bne.n	8002018 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e09e      	b.n	8002116 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe0:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d115      	bne.n	8002018 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e092      	b.n	8002116 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff8:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e086      	b.n	8002116 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e07e      	b.n	8002116 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002018:	4b42      	ldr	r3, [pc, #264]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 0203 	bic.w	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	493f      	ldr	r1, [pc, #252]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202a:	f7ff f877 	bl	800111c <HAL_GetTick>
 800202e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002030:	e00a      	b.n	8002048 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002032:	f7ff f873 	bl	800111c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e066      	b.n	8002116 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 020c 	and.w	r2, r3, #12
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	429a      	cmp	r2, r3
 8002058:	d1eb      	bne.n	8002032 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002066:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	492c      	ldr	r1, [pc, #176]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCC_ClockConfig+0x1b0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d210      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_ClockConfig+0x1b0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 0207 	bic.w	r2, r3, #7
 800208e:	4924      	ldr	r1, [pc, #144]	; (8002120 <HAL_RCC_ClockConfig+0x1b0>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_ClockConfig+0x1b0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e036      	b.n	8002116 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4918      	ldr	r1, [pc, #96]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4910      	ldr	r1, [pc, #64]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e6:	f000 f825 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020ea:	4601      	mov	r1, r0
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_ClockConfig+0x1b4>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe ffba 	bl	8001084 <HAL_InitTick>
 8002110:	4603      	mov	r3, r0
 8002112:	72fb      	strb	r3, [r7, #11]

  return status;
 8002114:	7afb      	ldrb	r3, [r7, #11]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
 8002128:	080059f8 	.word	0x080059f8
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d121      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d11e      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002168:	4b33      	ldr	r3, [pc, #204]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002190:	4a2a      	ldr	r2, [pc, #168]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002198:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	e004      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d133      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa4>
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0xaa>
 80021d6:	e005      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021da:	617b      	str	r3, [r7, #20]
      break;
 80021dc:	e005      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_GetSysClockFreq+0x110>)
 80021e0:	617b      	str	r3, [r7, #20]
      break;
 80021e2:	e002      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	617b      	str	r3, [r7, #20]
      break;
 80021e8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	3301      	adds	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	fb02 f203 	mul.w	r2, r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0e5b      	lsrs	r3, r3, #25
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800222a:	69bb      	ldr	r3, [r7, #24]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3724      	adds	r7, #36	; 0x24
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40021000 	.word	0x40021000
 800223c:	08005a10 	.word	0x08005a10
 8002240:	00f42400 	.word	0x00f42400
 8002244:	007a1200 	.word	0x007a1200

08002248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000000 	.word	0x20000000

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4601      	mov	r1, r0
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	08005a08 	.word	0x08005a08

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002290:	f7ff ffda 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002294:	4601      	mov	r1, r0
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0adb      	lsrs	r3, r3, #11
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08005a08 	.word	0x08005a08

080022b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022d0:	f7ff f9ca 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 80022d4:	6178      	str	r0, [r7, #20]
 80022d6:	e014      	b.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	4a24      	ldr	r2, [pc, #144]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6593      	str	r3, [r2, #88]	; 0x58
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022f0:	f7ff f9ba 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 80022f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002300:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002308:	d10b      	bne.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d919      	bls.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2ba0      	cmp	r3, #160	; 0xa0
 8002314:	d902      	bls.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002316:	2302      	movs	r3, #2
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e013      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231c:	2301      	movs	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e010      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d902      	bls.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002328:	2303      	movs	r3, #3
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e00a      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d102      	bne.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002334:	2302      	movs	r3, #2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e004      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b70      	cmp	r3, #112	; 0x70
 800233e:	d101      	bne.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 0207 	bic.w	r2, r3, #7
 800234c:	4909      	ldr	r1, [pc, #36]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002380:	2300      	movs	r3, #0
 8002382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002384:	2300      	movs	r3, #0
 8002386:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02f      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800239c:	d005      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 800239e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023a2:	d015      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80023a8:	e00f      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023aa:	4bac      	ldr	r3, [pc, #688]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4aab      	ldr	r2, [pc, #684]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b6:	e00c      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3304      	adds	r3, #4
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f9dc 	bl	800277c <RCCEx_PLLSAI1_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c8:	e003      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	74fb      	strb	r3, [r7, #19]
      break;
 80023ce:	e000      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80023d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d8:	4ba0      	ldr	r3, [pc, #640]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	499d      	ldr	r1, [pc, #628]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ee:	e001      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8099 	beq.w	8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002406:	4b95      	ldr	r3, [pc, #596]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00d      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	4b8f      	ldr	r3, [pc, #572]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	4a8e      	ldr	r2, [pc, #568]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002426:	6593      	str	r3, [r2, #88]	; 0x58
 8002428:	4b8c      	ldr	r3, [pc, #560]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002434:	2301      	movs	r3, #1
 8002436:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002438:	4b89      	ldr	r3, [pc, #548]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a88      	ldr	r2, [pc, #544]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002442:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002444:	f7fe fe6a 	bl	800111c <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800244a:	e009      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244c:	f7fe fe66 	bl	800111c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d902      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	74fb      	strb	r3, [r7, #19]
        break;
 800245e:	e005      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002460:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ef      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d155      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002472:	4b7a      	ldr	r3, [pc, #488]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01e      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	429a      	cmp	r2, r3
 800248c:	d019      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800248e:	4b73      	ldr	r3, [pc, #460]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800249a:	4b70      	ldr	r3, [pc, #448]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024aa:	4b6c      	ldr	r3, [pc, #432]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	4a6a      	ldr	r2, [pc, #424]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024ba:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d016      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fe26 	bl	800111c <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d2:	e00b      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe fe22 	bl	800111c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d902      	bls.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	74fb      	strb	r3, [r7, #19]
            break;
 80024ea:	e006      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ec:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0ec      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002500:	4b56      	ldr	r3, [pc, #344]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250e:	4953      	ldr	r1, [pc, #332]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002516:	e004      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
 800251c:	e001      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002522:	7c7b      	ldrb	r3, [r7, #17]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	4a4b      	ldr	r2, [pc, #300]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002540:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 0203 	bic.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4943      	ldr	r1, [pc, #268]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f023 020c 	bic.w	r2, r3, #12
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	493a      	ldr	r1, [pc, #232]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	4932      	ldr	r1, [pc, #200]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	4929      	ldr	r1, [pc, #164]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	4921      	ldr	r1, [pc, #132]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4918      	ldr	r1, [pc, #96]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4910      	ldr	r1, [pc, #64]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d02c      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264c:	d10a      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800264e:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	4a02      	ldr	r2, [pc, #8]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002658:	60d3      	str	r3, [r2, #12]
 800265a:	e015      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800266c:	d10c      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f881 	bl	800277c <RCCEx_PLLSAI1_Config>
 800267a:	4603      	mov	r3, r0
 800267c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d028      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	492d      	ldr	r1, [pc, #180]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b4:	4b28      	ldr	r3, [pc, #160]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026be:	60d3      	str	r3, [r2, #12]
 80026c0:	e011      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f852 	bl	800277c <RCCEx_PLLSAI1_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01c      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	4915      	ldr	r1, [pc, #84]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002710:	d10c      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3304      	adds	r3, #4
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f82f 	bl	800277c <RCCEx_PLLSAI1_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4904      	ldr	r1, [pc, #16]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800274e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000

0800277c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800278a:	4b73      	ldr	r3, [pc, #460]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d018      	beq.n	80027c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002796:	4b70      	ldr	r3, [pc, #448]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0203 	and.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d10d      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
       ||
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027ae:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
       ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d044      	beq.n	800284c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e041      	b.n	800284c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d00c      	beq.n	80027ea <RCCEx_PLLSAI1_Config+0x6e>
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d013      	beq.n	80027fc <RCCEx_PLLSAI1_Config+0x80>
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d120      	bne.n	800281a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d8:	4b5f      	ldr	r3, [pc, #380]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d11d      	bne.n	8002820 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e8:	e01a      	b.n	8002820 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027ea:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fa:	e013      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027fc:	4b56      	ldr	r3, [pc, #344]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002808:	4b53      	ldr	r3, [pc, #332]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002818:	e006      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      break;
 800281e:	e004      	b.n	800282a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002820:	bf00      	nop
 8002822:	e002      	b.n	800282a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002828:	bf00      	nop
    }

    if(status == HAL_OK)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002830:	4b49      	ldr	r3, [pc, #292]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	3b01      	subs	r3, #1
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	430b      	orrs	r3, r1
 8002846:	4944      	ldr	r1, [pc, #272]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d17c      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a40      	ldr	r2, [pc, #256]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002858:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800285c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285e:	f7fe fc5d 	bl	800111c <HAL_GetTick>
 8002862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002864:	e009      	b.n	800287a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002866:	f7fe fc59 	bl	800111c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d902      	bls.n	800287a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	73fb      	strb	r3, [r7, #15]
        break;
 8002878:	e005      	b.n	8002886 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800287a:	4b37      	ldr	r3, [pc, #220]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ef      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d15f      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d110      	bne.n	80028b4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800289a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6892      	ldr	r2, [r2, #8]
 80028a2:	0211      	lsls	r1, r2, #8
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68d2      	ldr	r2, [r2, #12]
 80028a8:	06d2      	lsls	r2, r2, #27
 80028aa:	430a      	orrs	r2, r1
 80028ac:	492a      	ldr	r1, [pc, #168]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	610b      	str	r3, [r1, #16]
 80028b2:	e027      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d112      	bne.n	80028e0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6892      	ldr	r2, [r2, #8]
 80028ca:	0211      	lsls	r1, r2, #8
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6912      	ldr	r2, [r2, #16]
 80028d0:	0852      	lsrs	r2, r2, #1
 80028d2:	3a01      	subs	r2, #1
 80028d4:	0552      	lsls	r2, r2, #21
 80028d6:	430a      	orrs	r2, r1
 80028d8:	491f      	ldr	r1, [pc, #124]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	610b      	str	r3, [r1, #16]
 80028de:	e011      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6892      	ldr	r2, [r2, #8]
 80028f0:	0211      	lsls	r1, r2, #8
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6952      	ldr	r2, [r2, #20]
 80028f6:	0852      	lsrs	r2, r2, #1
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0652      	lsls	r2, r2, #25
 80028fc:	430a      	orrs	r2, r1
 80028fe:	4916      	ldr	r1, [pc, #88]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800290a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800290e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fc04 	bl	800111c <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002916:	e009      	b.n	800292c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002918:	f7fe fc00 	bl	800111c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d902      	bls.n	800292c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	73fb      	strb	r3, [r7, #15]
          break;
 800292a:	e005      	b.n	8002938 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4904      	ldr	r1, [pc, #16]	; (8002958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000

0800295c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e01d      	b.n	80029aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe f98c 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f000 fa70 	bl	8002e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e01d      	b.n	8002a00 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f815 	bl	8002a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f000 fa45 	bl	8002e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fda2 	bl	8003578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <HAL_TIM_PWM_Stop+0xb4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIM_PWM_Stop+0x36>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <HAL_TIM_PWM_Stop+0xb8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_PWM_Stop+0x36>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_TIM_PWM_Stop+0xbc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_PWM_Stop+0x3a>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_TIM_PWM_Stop+0x3c>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d017      	beq.n	8002a8c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6a1a      	ldr	r2, [r3, #32]
 8002a62:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_TIM_PWM_Stop+0x70>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a1a      	ldr	r2, [r3, #32]
 8002a72:	f240 4344 	movw	r3, #1092	; 0x444
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_PWM_Stop+0x70>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <HAL_TIM_PWM_Stop+0xa0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	f240 4344 	movw	r3, #1092	; 0x444
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_TIM_PWM_Stop+0xa0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	40014400 	.word	0x40014400

08002adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e105      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b14      	cmp	r3, #20
 8002b0a:	f200 80f0 	bhi.w	8002cee <HAL_TIM_PWM_ConfigChannel+0x212>
 8002b0e:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b69 	.word	0x08002b69
 8002b18:	08002cef 	.word	0x08002cef
 8002b1c:	08002cef 	.word	0x08002cef
 8002b20:	08002cef 	.word	0x08002cef
 8002b24:	08002ba9 	.word	0x08002ba9
 8002b28:	08002cef 	.word	0x08002cef
 8002b2c:	08002cef 	.word	0x08002cef
 8002b30:	08002cef 	.word	0x08002cef
 8002b34:	08002beb 	.word	0x08002beb
 8002b38:	08002cef 	.word	0x08002cef
 8002b3c:	08002cef 	.word	0x08002cef
 8002b40:	08002cef 	.word	0x08002cef
 8002b44:	08002c2b 	.word	0x08002c2b
 8002b48:	08002cef 	.word	0x08002cef
 8002b4c:	08002cef 	.word	0x08002cef
 8002b50:	08002cef 	.word	0x08002cef
 8002b54:	08002c6d 	.word	0x08002c6d
 8002b58:	08002cef 	.word	0x08002cef
 8002b5c:	08002cef 	.word	0x08002cef
 8002b60:	08002cef 	.word	0x08002cef
 8002b64:	08002cad 	.word	0x08002cad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f9ea 	bl	8002f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0208 	orr.w	r2, r2, #8
 8002b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0204 	bic.w	r2, r2, #4
 8002b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6999      	ldr	r1, [r3, #24]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	619a      	str	r2, [r3, #24]
      break;
 8002ba6:	e0a3      	b.n	8002cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fa46 	bl	8003040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6999      	ldr	r1, [r3, #24]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	021a      	lsls	r2, r3, #8
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	619a      	str	r2, [r3, #24]
      break;
 8002be8:	e082      	b.n	8002cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fa9f 	bl	8003134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0208 	orr.w	r2, r2, #8
 8002c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0204 	bic.w	r2, r2, #4
 8002c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69d9      	ldr	r1, [r3, #28]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	61da      	str	r2, [r3, #28]
      break;
 8002c28:	e062      	b.n	8002cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 faf7 	bl	8003224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69d9      	ldr	r1, [r3, #28]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	021a      	lsls	r2, r3, #8
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	61da      	str	r2, [r3, #28]
      break;
 8002c6a:	e041      	b.n	8002cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fb34 	bl	80032e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0208 	orr.w	r2, r2, #8
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002caa:	e021      	b.n	8002cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fb6c 	bl	8003390 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	021a      	lsls	r2, r3, #8
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002cec:	e000      	b.n	8002cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002cee:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop

08002d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIM_ConfigClockSource+0x18>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e0a8      	b.n	8002e76 <HAL_TIM_ConfigClockSource+0x16a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d067      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0x124>
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d80b      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x70>
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d073      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x144>
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d802      	bhi.n	8002d72 <HAL_TIM_ConfigClockSource+0x66>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d06f      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d70:	e078      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d06c      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x144>
 8002d76:	2b30      	cmp	r3, #48	; 0x30
 8002d78:	d06a      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002d7a:	e073      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d7c:	2b70      	cmp	r3, #112	; 0x70
 8002d7e:	d00d      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0x90>
 8002d80:	2b70      	cmp	r3, #112	; 0x70
 8002d82:	d804      	bhi.n	8002d8e <HAL_TIM_ConfigClockSource+0x82>
 8002d84:	2b50      	cmp	r3, #80	; 0x50
 8002d86:	d033      	beq.n	8002df0 <HAL_TIM_ConfigClockSource+0xe4>
 8002d88:	2b60      	cmp	r3, #96	; 0x60
 8002d8a:	d041      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002d8c:	e06a      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d92:	d066      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x156>
 8002d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d98:	d017      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002d9a:	e063      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f000 fbc4 	bl	8003538 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	609a      	str	r2, [r3, #8]
      break;
 8002dc8:	e04c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f000 fbad 	bl	8003538 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dec:	609a      	str	r2, [r3, #8]
      break;
 8002dee:	e039      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f000 fb21 	bl	8003444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2150      	movs	r1, #80	; 0x50
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fb7a 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8002e0e:	e029      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f000 fb40 	bl	80034a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2160      	movs	r1, #96	; 0x60
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fb6a 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8002e2e:	e019      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f000 fb01 	bl	8003444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2140      	movs	r1, #64	; 0x40
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fb5a 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8002e4e:	e009      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fb51 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8002e60:	e000      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a2a      	ldr	r2, [pc, #168]	; (8002f3c <TIM_Base_SetConfig+0xbc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_Base_SetConfig+0x20>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9e:	d108      	bne.n	8002eb2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <TIM_Base_SetConfig+0xbc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <TIM_Base_SetConfig+0x52>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d007      	beq.n	8002ed2 <TIM_Base_SetConfig+0x52>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <TIM_Base_SetConfig+0xc0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_Base_SetConfig+0x52>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <TIM_Base_SetConfig+0xc4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a0c      	ldr	r2, [pc, #48]	; (8002f3c <TIM_Base_SetConfig+0xbc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <TIM_Base_SetConfig+0xa0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <TIM_Base_SetConfig+0xc0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_Base_SetConfig+0xa0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <TIM_Base_SetConfig+0xc4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	615a      	str	r2, [r3, #20]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40014000 	.word	0x40014000
 8002f44:	40014400 	.word	0x40014400

08002f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0201 	bic.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f023 0302 	bic.w	r3, r3, #2
 8002f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a24      	ldr	r2, [pc, #144]	; (8003034 <TIM_OC1_SetConfig+0xec>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d007      	beq.n	8002fb8 <TIM_OC1_SetConfig+0x70>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a23      	ldr	r2, [pc, #140]	; (8003038 <TIM_OC1_SetConfig+0xf0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_OC1_SetConfig+0x70>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a22      	ldr	r2, [pc, #136]	; (800303c <TIM_OC1_SetConfig+0xf4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10c      	bne.n	8002fd2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0308 	bic.w	r3, r3, #8
 8002fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a17      	ldr	r2, [pc, #92]	; (8003034 <TIM_OC1_SetConfig+0xec>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_OC1_SetConfig+0xa2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a16      	ldr	r2, [pc, #88]	; (8003038 <TIM_OC1_SetConfig+0xf0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_OC1_SetConfig+0xa2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <TIM_OC1_SetConfig+0xf4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d111      	bne.n	800300e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	621a      	str	r2, [r3, #32]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40014000 	.word	0x40014000
 800303c:	40014400 	.word	0x40014400

08003040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f023 0210 	bic.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0320 	bic.w	r3, r3, #32
 800308e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <TIM_OC2_SetConfig+0xe8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10d      	bne.n	80030c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a19      	ldr	r2, [pc, #100]	; (8003128 <TIM_OC2_SetConfig+0xe8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <TIM_OC2_SetConfig+0x98>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <TIM_OC2_SetConfig+0xec>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_OC2_SetConfig+0x98>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <TIM_OC2_SetConfig+0xf0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d113      	bne.n	8003100 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40014000 	.word	0x40014000
 8003130:	40014400 	.word	0x40014400

08003134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0303 	bic.w	r3, r3, #3
 800316e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <TIM_OC3_SetConfig+0xe4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10d      	bne.n	80031b2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800319c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a18      	ldr	r2, [pc, #96]	; (8003218 <TIM_OC3_SetConfig+0xe4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d007      	beq.n	80031ca <TIM_OC3_SetConfig+0x96>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <TIM_OC3_SetConfig+0xe8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d003      	beq.n	80031ca <TIM_OC3_SetConfig+0x96>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a16      	ldr	r2, [pc, #88]	; (8003220 <TIM_OC3_SetConfig+0xec>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d113      	bne.n	80031f2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	621a      	str	r2, [r3, #32]
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40012c00 	.word	0x40012c00
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400

08003224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <TIM_OC4_SetConfig+0xb0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_OC4_SetConfig+0x74>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <TIM_OC4_SetConfig+0xb4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_OC4_SetConfig+0x74>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a12      	ldr	r2, [pc, #72]	; (80032dc <TIM_OC4_SetConfig+0xb8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d109      	bne.n	80032ac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800329e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	621a      	str	r2, [r3, #32]
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400

080032e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a13      	ldr	r2, [pc, #76]	; (8003384 <TIM_OC5_SetConfig+0xa4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_OC5_SetConfig+0x6a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <TIM_OC5_SetConfig+0xa8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_OC5_SetConfig+0x6a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a11      	ldr	r2, [pc, #68]	; (800338c <TIM_OC5_SetConfig+0xac>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d109      	bne.n	800335e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	621a      	str	r2, [r3, #32]
}
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400

08003390 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	051b      	lsls	r3, r3, #20
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a14      	ldr	r2, [pc, #80]	; (8003438 <TIM_OC6_SetConfig+0xa8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_OC6_SetConfig+0x6c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a13      	ldr	r2, [pc, #76]	; (800343c <TIM_OC6_SetConfig+0xac>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_OC6_SetConfig+0x6c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <TIM_OC6_SetConfig+0xb0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d109      	bne.n	8003410 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40014000 	.word	0x40014000
 8003440:	40014400 	.word	0x40014400

08003444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0201 	bic.w	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f023 030a 	bic.w	r3, r3, #10
 8003480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b087      	sub	sp, #28
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0210 	bic.w	r2, r3, #16
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	031b      	lsls	r3, r3, #12
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	f043 0307 	orr.w	r3, r3, #7
 8003524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	021a      	lsls	r2, r3, #8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	431a      	orrs	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2201      	movs	r2, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	43db      	mvns	r3, r3
 800359a:	401a      	ands	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2204      	movs	r2, #4
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f902 	bl	80037e0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_TIMEx_PWMN_Start+0x5c>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d00b      	beq.n	8003616 <HAL_TIMEx_PWMN_Start+0x52>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d007      	beq.n	8003616 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00010007 	.word	0x00010007

08003624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e04f      	b.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800366c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d004      	beq.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a10      	ldr	r2, [pc, #64]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10c      	bne.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40014000 	.word	0x40014000

080036f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003708:	2302      	movs	r3, #2
 800370a:	e060      	b.n	80037ce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d115      	bne.n	80037bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	051b      	lsls	r3, r3, #20
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40012c00 	.word	0x40012c00

080037e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2204      	movs	r2, #4
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e040      	b.n	80038be <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003840:	2b00      	cmp	r3, #0
 8003842:	d106      	bne.n	8003852 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7fd fa7f 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2224      	movs	r2, #36	; 0x24
 8003856:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f98d 	bl	8003b88 <UART_SetConfig>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e022      	b.n	80038be <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fc67 	bl	8004154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003894:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fcee 	bl	8004298 <UART_CheckIdleState>
 80038bc:	4603      	mov	r3, r0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b08a      	sub	sp, #40	; 0x28
 80038ca:	af02      	add	r7, sp, #8
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	2b20      	cmp	r3, #32
 80038dc:	f040 8081 	bne.w	80039e2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_UART_Transmit+0x26>
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e079      	b.n	80039e4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Transmit+0x38>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e072      	b.n	80039e4 <HAL_UART_Transmit+0x11e>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2221      	movs	r2, #33	; 0x21
 8003910:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003912:	f7fd fc03 	bl	800111c <HAL_GetTick>
 8003916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003930:	d108      	bne.n	8003944 <HAL_UART_Transmit+0x7e>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e003      	b.n	800394c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003954:	e02d      	b.n	80039b2 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fcde 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e039      	b.n	80039e4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003982:	b292      	uxth	r2, r2
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	3302      	adds	r3, #2
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	e008      	b.n	80039a0 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b292      	uxth	r2, r2
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3301      	adds	r3, #1
 800399e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cb      	bne.n	8003956 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fcaa 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e005      	b.n	80039e4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	f040 80bb 	bne.w	8003b7c <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_UART_Receive+0x26>
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0b3      	b.n	8003b7e <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_UART_Receive+0x38>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e0ac      	b.n	8003b7e <HAL_UART_Receive+0x192>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2222      	movs	r2, #34	; 0x22
 8003a36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003a38:	f7fd fb70 	bl	800111c <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	88fa      	ldrh	r2, [r7, #6]
 8003a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a56:	d10e      	bne.n	8003a76 <HAL_UART_Receive+0x8a>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_UART_Receive+0x80>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a6a:	e02d      	b.n	8003ac8 <HAL_UART_Receive+0xdc>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	; 0xff
 8003a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a74:	e028      	b.n	8003ac8 <HAL_UART_Receive+0xdc>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <HAL_UART_Receive+0xae>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <HAL_UART_Receive+0xa4>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	22ff      	movs	r2, #255	; 0xff
 8003a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a8e:	e01b      	b.n	8003ac8 <HAL_UART_Receive+0xdc>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	227f      	movs	r2, #127	; 0x7f
 8003a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a98:	e016      	b.n	8003ac8 <HAL_UART_Receive+0xdc>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_UART_Receive+0xd4>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <HAL_UART_Receive+0xca>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	227f      	movs	r2, #127	; 0x7f
 8003ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ab4:	e008      	b.n	8003ac8 <HAL_UART_Receive+0xdc>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	223f      	movs	r2, #63	; 0x3f
 8003aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003abe:	e003      	b.n	8003ac8 <HAL_UART_Receive+0xdc>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ace:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad8:	d108      	bne.n	8003aec <HAL_UART_Receive+0x100>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e003      	b.n	8003af4 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003afc:	e033      	b.n	8003b66 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2120      	movs	r1, #32
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fc0a 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e032      	b.n	8003b7e <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	8a7b      	ldrh	r3, [r7, #18]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	3302      	adds	r3, #2
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e00d      	b.n	8003b54 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	8a7b      	ldrh	r3, [r7, #18]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	4013      	ands	r3, r2
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3301      	adds	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1c5      	bne.n	8003afe <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e000      	b.n	8003b7e <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003b8c:	b08a      	sub	sp, #40	; 0x28
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4bb3      	ldr	r3, [pc, #716]	; (8003e8c <UART_SetConfig+0x304>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4aa9      	ldr	r2, [pc, #676]	; (8003e90 <UART_SetConfig+0x308>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d004      	beq.n	8003bfa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4aa0      	ldr	r2, [pc, #640]	; (8003e94 <UART_SetConfig+0x30c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d126      	bne.n	8003c66 <UART_SetConfig+0xde>
 8003c18:	4b9f      	ldr	r3, [pc, #636]	; (8003e98 <UART_SetConfig+0x310>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d81a      	bhi.n	8003c5c <UART_SetConfig+0xd4>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0xa4>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c4d 	.word	0x08003c4d
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c55 	.word	0x08003c55
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e080      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e07c      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e078      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003c54:	2308      	movs	r3, #8
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e074      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	bf00      	nop
 8003c64:	e06f      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a8c      	ldr	r2, [pc, #560]	; (8003e9c <UART_SetConfig+0x314>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d138      	bne.n	8003ce2 <UART_SetConfig+0x15a>
 8003c70:	4b89      	ldr	r3, [pc, #548]	; (8003e98 <UART_SetConfig+0x310>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d82c      	bhi.n	8003cd8 <UART_SetConfig+0x150>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0xfc>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003cd9 	.word	0x08003cd9
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003cd9 	.word	0x08003cd9
 8003c9c:	08003cd9 	.word	0x08003cd9
 8003ca0:	08003cd9 	.word	0x08003cd9
 8003ca4:	08003cc1 	.word	0x08003cc1
 8003ca8:	08003cd9 	.word	0x08003cd9
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbe:	e042      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc6:	e03e      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cce:	e03a      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e036      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	bf00      	nop
 8003ce0:	e031      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a6a      	ldr	r2, [pc, #424]	; (8003e90 <UART_SetConfig+0x308>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d129      	bne.n	8003d40 <UART_SetConfig+0x1b8>
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <UART_SetConfig+0x310>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d014      	beq.n	8003d26 <UART_SetConfig+0x19e>
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d00:	d802      	bhi.n	8003d08 <UART_SetConfig+0x180>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <UART_SetConfig+0x18e>
 8003d06:	e016      	b.n	8003d36 <UART_SetConfig+0x1ae>
 8003d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0c:	d007      	beq.n	8003d1e <UART_SetConfig+0x196>
 8003d0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d12:	d00c      	beq.n	8003d2e <UART_SetConfig+0x1a6>
 8003d14:	e00f      	b.n	8003d36 <UART_SetConfig+0x1ae>
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1c:	e013      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d24:	e00f      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003d26:	2304      	movs	r3, #4
 8003d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2c:	e00b      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d34:	e007      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003d36:	2310      	movs	r3, #16
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3c:	bf00      	nop
 8003d3e:	e002      	b.n	8003d46 <UART_SetConfig+0x1be>
 8003d40:	2310      	movs	r3, #16
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a51      	ldr	r2, [pc, #324]	; (8003e90 <UART_SetConfig+0x308>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	f040 80fa 	bne.w	8003f46 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d823      	bhi.n	8003da2 <UART_SetConfig+0x21a>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x1d8>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003da3 	.word	0x08003da3
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003da3 	.word	0x08003da3
 8003d70:	08003d93 	.word	0x08003d93
 8003d74:	08003da3 	.word	0x08003da3
 8003d78:	08003da3 	.word	0x08003da3
 8003d7c:	08003da3 	.word	0x08003da3
 8003d80:	08003d9b 	.word	0x08003d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7fe fa6c 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003d88:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d8a:	e00d      	b.n	8003da8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003d8c:	4b44      	ldr	r3, [pc, #272]	; (8003ea0 <UART_SetConfig+0x318>)
 8003d8e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d90:	e00a      	b.n	8003da8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003d92:	f7fe f9cf 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003d96:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d98:	e006      	b.n	8003da8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003da0:	e002      	b.n	8003da8 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	76fb      	strb	r3, [r7, #27]
        break;
 8003da6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 81c6 	beq.w	800413c <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d305      	bcc.n	8003dcc <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d902      	bls.n	8003dd2 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	76fb      	strb	r3, [r7, #27]
 8003dd0:	e1b4      	b.n	800413c <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8003dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	f200 80a2 	bhi.w	8003f20 <UART_SetConfig+0x398>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UART_SetConfig+0x25c>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003f21 	.word	0x08003f21
 8003dec:	08003e57 	.word	0x08003e57
 8003df0:	08003f21 	.word	0x08003f21
 8003df4:	08003ea9 	.word	0x08003ea9
 8003df8:	08003f21 	.word	0x08003f21
 8003dfc:	08003f21 	.word	0x08003f21
 8003e00:	08003f21 	.word	0x08003f21
 8003e04:	08003ef7 	.word	0x08003ef7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003e08:	f7fe fa2a 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003e0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f04f 0400 	mov.w	r4, #0
 8003e1e:	0214      	lsls	r4, r2, #8
 8003e20:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003e24:	020b      	lsls	r3, r1, #8
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6852      	ldr	r2, [r2, #4]
 8003e2a:	0852      	lsrs	r2, r2, #1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	eb13 0b01 	adds.w	fp, r3, r1
 8003e36:	eb44 0c02 	adc.w	ip, r4, r2
 8003e3a:	4658      	mov	r0, fp
 8003e3c:	4661      	mov	r1, ip
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f04f 0400 	mov.w	r4, #0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4623      	mov	r3, r4
 8003e4a:	f7fc fa11 	bl	8000270 <__aeabi_uldivmod>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	460c      	mov	r4, r1
 8003e52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e54:	e067      	b.n	8003f26 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	f04f 0400 	mov.w	r4, #0
 8003e60:	4910      	ldr	r1, [pc, #64]	; (8003ea4 <UART_SetConfig+0x31c>)
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	eb13 0b01 	adds.w	fp, r3, r1
 8003e6a:	eb44 0c02 	adc.w	ip, r4, r2
 8003e6e:	4658      	mov	r0, fp
 8003e70:	4661      	mov	r1, ip
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f04f 0400 	mov.w	r4, #0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	f7fc f9f7 	bl	8000270 <__aeabi_uldivmod>
 8003e82:	4603      	mov	r3, r0
 8003e84:	460c      	mov	r4, r1
 8003e86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e88:	e04d      	b.n	8003f26 <UART_SetConfig+0x39e>
 8003e8a:	bf00      	nop
 8003e8c:	efff69f3 	.word	0xefff69f3
 8003e90:	40008000 	.word	0x40008000
 8003e94:	40013800 	.word	0x40013800
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003ea8:	f7fe f944 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003eac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	f04f 0400 	mov.w	r4, #0
 8003ebe:	0214      	lsls	r4, r2, #8
 8003ec0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ec4:	020b      	lsls	r3, r1, #8
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6852      	ldr	r2, [r2, #4]
 8003eca:	0852      	lsrs	r2, r2, #1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	eb13 0b01 	adds.w	fp, r3, r1
 8003ed6:	eb44 0c02 	adc.w	ip, r4, r2
 8003eda:	4658      	mov	r0, fp
 8003edc:	4661      	mov	r1, ip
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f04f 0400 	mov.w	r4, #0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	f7fc f9c1 	bl	8000270 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ef4:	e017      	b.n	8003f26 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	f04f 0400 	mov.w	r4, #0
 8003f00:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003f04:	f144 0100 	adc.w	r1, r4, #0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	f7fc f9ac 	bl	8000270 <__aeabi_uldivmod>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003f1e:	e002      	b.n	8003f26 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	76fb      	strb	r3, [r7, #27]
            break;
 8003f24:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2c:	d308      	bcc.n	8003f40 <UART_SetConfig+0x3b8>
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f34:	d204      	bcs.n	8003f40 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	e0fd      	b.n	800413c <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	76fb      	strb	r3, [r7, #27]
 8003f44:	e0fa      	b.n	800413c <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4e:	f040 8083 	bne.w	8004058 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8003f52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d85e      	bhi.n	8004018 <UART_SetConfig+0x490>
 8003f5a:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <UART_SetConfig+0x3d8>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003fa5 	.word	0x08003fa5
 8003f68:	08003fc5 	.word	0x08003fc5
 8003f6c:	08004019 	.word	0x08004019
 8003f70:	08003fe1 	.word	0x08003fe1
 8003f74:	08004019 	.word	0x08004019
 8003f78:	08004019 	.word	0x08004019
 8003f7c:	08004019 	.word	0x08004019
 8003f80:	08004001 	.word	0x08004001
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f84:	f7fe f96c 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003f88:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	005a      	lsls	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa2:	e03c      	b.n	800401e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7fe f972 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 8003fa8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	005a      	lsls	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fc2:	e02c      	b.n	800401e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003fce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6852      	ldr	r2, [r2, #4]
 8003fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fde:	e01e      	b.n	800401e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe0:	f7fe f8a8 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003fe4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	005a      	lsls	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ffe:	e00e      	b.n	800401e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	b29b      	uxth	r3, r3
 8004014:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004016:	e002      	b.n	800401e <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	76fb      	strb	r3, [r7, #27]
        break;
 800401c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b0f      	cmp	r3, #15
 8004022:	d916      	bls.n	8004052 <UART_SetConfig+0x4ca>
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402a:	d212      	bcs.n	8004052 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f023 030f 	bic.w	r3, r3, #15
 8004034:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	b29a      	uxth	r2, r3
 8004042:	89fb      	ldrh	r3, [r7, #14]
 8004044:	4313      	orrs	r3, r2
 8004046:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	89fa      	ldrh	r2, [r7, #14]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	e074      	b.n	800413c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	76fb      	strb	r3, [r7, #27]
 8004056:	e071      	b.n	800413c <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8004058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800405c:	2b08      	cmp	r3, #8
 800405e:	d85c      	bhi.n	800411a <UART_SetConfig+0x592>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x4e0>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	0800408d 	.word	0x0800408d
 800406c:	080040ab 	.word	0x080040ab
 8004070:	080040c9 	.word	0x080040c9
 8004074:	0800411b 	.word	0x0800411b
 8004078:	080040e5 	.word	0x080040e5
 800407c:	0800411b 	.word	0x0800411b
 8004080:	0800411b 	.word	0x0800411b
 8004084:	0800411b 	.word	0x0800411b
 8004088:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe f8e8 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8004090:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	085a      	lsrs	r2, r3, #1
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040a8:	e03a      	b.n	8004120 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040aa:	f7fe f8ef 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 80040ae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	085a      	lsrs	r2, r3, #1
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040c6:	e02b      	b.n	8004120 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80040d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6852      	ldr	r2, [r2, #4]
 80040da:	fbb3 f3f2 	udiv	r3, r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040e2:	e01d      	b.n	8004120 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e4:	f7fe f826 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80040e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	085a      	lsrs	r2, r3, #1
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	441a      	add	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004100:	e00e      	b.n	8004120 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	b29b      	uxth	r3, r3
 8004116:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004118:	e002      	b.n	8004120 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	76fb      	strb	r3, [r7, #27]
        break;
 800411e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b0f      	cmp	r3, #15
 8004124:	d908      	bls.n	8004138 <UART_SetConfig+0x5b0>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412c:	d204      	bcs.n	8004138 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	e001      	b.n	800413c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004148:	7efb      	ldrb	r3, [r7, #27]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3728      	adds	r7, #40	; 0x28
 800414e:	46bd      	mov	sp, r7
 8004150:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01a      	beq.n	800426a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004252:	d10a      	bne.n	800426a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]
  }
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af02      	add	r7, sp, #8
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042a6:	f7fc ff39 	bl	800111c <HAL_GetTick>
 80042aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d10e      	bne.n	80042d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f82a 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e020      	b.n	800431a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d10e      	bne.n	8004304 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f814 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e00a      	b.n	800431a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004332:	e05d      	b.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d059      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433c:	f7fc feee 	bl	800111c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	429a      	cmp	r2, r3
 800434a:	d302      	bcc.n	8004352 <UART_WaitOnFlagUntilTimeout+0x30>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11b      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004360:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e042      	b.n	8004410 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02b      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a6:	d123      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043c0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e00f      	b.n	8004410 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	429a      	cmp	r2, r3
 800440c:	d092      	beq.n	8004334 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <__errno>:
 8004418:	4b01      	ldr	r3, [pc, #4]	; (8004420 <__errno+0x8>)
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	2000000c 	.word	0x2000000c

08004424 <__libc_init_array>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	4e0d      	ldr	r6, [pc, #52]	; (800445c <__libc_init_array+0x38>)
 8004428:	4c0d      	ldr	r4, [pc, #52]	; (8004460 <__libc_init_array+0x3c>)
 800442a:	1ba4      	subs	r4, r4, r6
 800442c:	10a4      	asrs	r4, r4, #2
 800442e:	2500      	movs	r5, #0
 8004430:	42a5      	cmp	r5, r4
 8004432:	d109      	bne.n	8004448 <__libc_init_array+0x24>
 8004434:	4e0b      	ldr	r6, [pc, #44]	; (8004464 <__libc_init_array+0x40>)
 8004436:	4c0c      	ldr	r4, [pc, #48]	; (8004468 <__libc_init_array+0x44>)
 8004438:	f001 fa96 	bl	8005968 <_init>
 800443c:	1ba4      	subs	r4, r4, r6
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	2500      	movs	r5, #0
 8004442:	42a5      	cmp	r5, r4
 8004444:	d105      	bne.n	8004452 <__libc_init_array+0x2e>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800444c:	4798      	blx	r3
 800444e:	3501      	adds	r5, #1
 8004450:	e7ee      	b.n	8004430 <__libc_init_array+0xc>
 8004452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004456:	4798      	blx	r3
 8004458:	3501      	adds	r5, #1
 800445a:	e7f2      	b.n	8004442 <__libc_init_array+0x1e>
 800445c:	08005bd8 	.word	0x08005bd8
 8004460:	08005bd8 	.word	0x08005bd8
 8004464:	08005bd8 	.word	0x08005bd8
 8004468:	08005bdc 	.word	0x08005bdc

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <_puts_r>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	460e      	mov	r6, r1
 8004480:	4605      	mov	r5, r0
 8004482:	b118      	cbz	r0, 800448c <_puts_r+0x10>
 8004484:	6983      	ldr	r3, [r0, #24]
 8004486:	b90b      	cbnz	r3, 800448c <_puts_r+0x10>
 8004488:	f000 fa36 	bl	80048f8 <__sinit>
 800448c:	69ab      	ldr	r3, [r5, #24]
 800448e:	68ac      	ldr	r4, [r5, #8]
 8004490:	b913      	cbnz	r3, 8004498 <_puts_r+0x1c>
 8004492:	4628      	mov	r0, r5
 8004494:	f000 fa30 	bl	80048f8 <__sinit>
 8004498:	4b23      	ldr	r3, [pc, #140]	; (8004528 <_puts_r+0xac>)
 800449a:	429c      	cmp	r4, r3
 800449c:	d117      	bne.n	80044ce <_puts_r+0x52>
 800449e:	686c      	ldr	r4, [r5, #4]
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	071b      	lsls	r3, r3, #28
 80044a4:	d51d      	bpl.n	80044e2 <_puts_r+0x66>
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	b1db      	cbz	r3, 80044e2 <_puts_r+0x66>
 80044aa:	3e01      	subs	r6, #1
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	b9e9      	cbnz	r1, 80044f4 <_puts_r+0x78>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	da2e      	bge.n	800451a <_puts_r+0x9e>
 80044bc:	4622      	mov	r2, r4
 80044be:	210a      	movs	r1, #10
 80044c0:	4628      	mov	r0, r5
 80044c2:	f000 f857 	bl	8004574 <__swbuf_r>
 80044c6:	3001      	adds	r0, #1
 80044c8:	d011      	beq.n	80044ee <_puts_r+0x72>
 80044ca:	200a      	movs	r0, #10
 80044cc:	e011      	b.n	80044f2 <_puts_r+0x76>
 80044ce:	4b17      	ldr	r3, [pc, #92]	; (800452c <_puts_r+0xb0>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d101      	bne.n	80044d8 <_puts_r+0x5c>
 80044d4:	68ac      	ldr	r4, [r5, #8]
 80044d6:	e7e3      	b.n	80044a0 <_puts_r+0x24>
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <_puts_r+0xb4>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	bf08      	it	eq
 80044de:	68ec      	ldreq	r4, [r5, #12]
 80044e0:	e7de      	b.n	80044a0 <_puts_r+0x24>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f897 	bl	8004618 <__swsetup_r>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d0dd      	beq.n	80044aa <_puts_r+0x2e>
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	da04      	bge.n	8004502 <_puts_r+0x86>
 80044f8:	69a2      	ldr	r2, [r4, #24]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	dc06      	bgt.n	800450c <_puts_r+0x90>
 80044fe:	290a      	cmp	r1, #10
 8004500:	d004      	beq.n	800450c <_puts_r+0x90>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	6022      	str	r2, [r4, #0]
 8004508:	7019      	strb	r1, [r3, #0]
 800450a:	e7cf      	b.n	80044ac <_puts_r+0x30>
 800450c:	4622      	mov	r2, r4
 800450e:	4628      	mov	r0, r5
 8004510:	f000 f830 	bl	8004574 <__swbuf_r>
 8004514:	3001      	adds	r0, #1
 8004516:	d1c9      	bne.n	80044ac <_puts_r+0x30>
 8004518:	e7e9      	b.n	80044ee <_puts_r+0x72>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	200a      	movs	r0, #10
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	7018      	strb	r0, [r3, #0]
 8004524:	e7e5      	b.n	80044f2 <_puts_r+0x76>
 8004526:	bf00      	nop
 8004528:	08005a64 	.word	0x08005a64
 800452c:	08005a84 	.word	0x08005a84
 8004530:	08005a44 	.word	0x08005a44

08004534 <puts>:
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <puts+0xc>)
 8004536:	4601      	mov	r1, r0
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f7ff bf9f 	b.w	800447c <_puts_r>
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <iscanf>:
 8004544:	b40f      	push	{r0, r1, r2, r3}
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <iscanf+0x2c>)
 8004548:	b513      	push	{r0, r1, r4, lr}
 800454a:	681c      	ldr	r4, [r3, #0]
 800454c:	b124      	cbz	r4, 8004558 <iscanf+0x14>
 800454e:	69a3      	ldr	r3, [r4, #24]
 8004550:	b913      	cbnz	r3, 8004558 <iscanf+0x14>
 8004552:	4620      	mov	r0, r4
 8004554:	f000 f9d0 	bl	80048f8 <__sinit>
 8004558:	ab05      	add	r3, sp, #20
 800455a:	9a04      	ldr	r2, [sp, #16]
 800455c:	6861      	ldr	r1, [r4, #4]
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	4620      	mov	r0, r4
 8004562:	f000 fccb 	bl	8004efc <_vfiscanf_r>
 8004566:	b002      	add	sp, #8
 8004568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456c:	b004      	add	sp, #16
 800456e:	4770      	bx	lr
 8004570:	2000000c 	.word	0x2000000c

08004574 <__swbuf_r>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	460e      	mov	r6, r1
 8004578:	4614      	mov	r4, r2
 800457a:	4605      	mov	r5, r0
 800457c:	b118      	cbz	r0, 8004586 <__swbuf_r+0x12>
 800457e:	6983      	ldr	r3, [r0, #24]
 8004580:	b90b      	cbnz	r3, 8004586 <__swbuf_r+0x12>
 8004582:	f000 f9b9 	bl	80048f8 <__sinit>
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <__swbuf_r+0x98>)
 8004588:	429c      	cmp	r4, r3
 800458a:	d12a      	bne.n	80045e2 <__swbuf_r+0x6e>
 800458c:	686c      	ldr	r4, [r5, #4]
 800458e:	69a3      	ldr	r3, [r4, #24]
 8004590:	60a3      	str	r3, [r4, #8]
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	071a      	lsls	r2, r3, #28
 8004596:	d52e      	bpl.n	80045f6 <__swbuf_r+0x82>
 8004598:	6923      	ldr	r3, [r4, #16]
 800459a:	b363      	cbz	r3, 80045f6 <__swbuf_r+0x82>
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	1ac0      	subs	r0, r0, r3
 80045a2:	6963      	ldr	r3, [r4, #20]
 80045a4:	b2f6      	uxtb	r6, r6
 80045a6:	4283      	cmp	r3, r0
 80045a8:	4637      	mov	r7, r6
 80045aa:	dc04      	bgt.n	80045b6 <__swbuf_r+0x42>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f926 	bl	8004800 <_fflush_r>
 80045b4:	bb28      	cbnz	r0, 8004602 <__swbuf_r+0x8e>
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	60a3      	str	r3, [r4, #8]
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	6022      	str	r2, [r4, #0]
 80045c2:	701e      	strb	r6, [r3, #0]
 80045c4:	6963      	ldr	r3, [r4, #20]
 80045c6:	3001      	adds	r0, #1
 80045c8:	4283      	cmp	r3, r0
 80045ca:	d004      	beq.n	80045d6 <__swbuf_r+0x62>
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	07db      	lsls	r3, r3, #31
 80045d0:	d519      	bpl.n	8004606 <__swbuf_r+0x92>
 80045d2:	2e0a      	cmp	r6, #10
 80045d4:	d117      	bne.n	8004606 <__swbuf_r+0x92>
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f911 	bl	8004800 <_fflush_r>
 80045de:	b190      	cbz	r0, 8004606 <__swbuf_r+0x92>
 80045e0:	e00f      	b.n	8004602 <__swbuf_r+0x8e>
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <__swbuf_r+0x9c>)
 80045e4:	429c      	cmp	r4, r3
 80045e6:	d101      	bne.n	80045ec <__swbuf_r+0x78>
 80045e8:	68ac      	ldr	r4, [r5, #8]
 80045ea:	e7d0      	b.n	800458e <__swbuf_r+0x1a>
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <__swbuf_r+0xa0>)
 80045ee:	429c      	cmp	r4, r3
 80045f0:	bf08      	it	eq
 80045f2:	68ec      	ldreq	r4, [r5, #12]
 80045f4:	e7cb      	b.n	800458e <__swbuf_r+0x1a>
 80045f6:	4621      	mov	r1, r4
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 f80d 	bl	8004618 <__swsetup_r>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d0cc      	beq.n	800459c <__swbuf_r+0x28>
 8004602:	f04f 37ff 	mov.w	r7, #4294967295
 8004606:	4638      	mov	r0, r7
 8004608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800460a:	bf00      	nop
 800460c:	08005a64 	.word	0x08005a64
 8004610:	08005a84 	.word	0x08005a84
 8004614:	08005a44 	.word	0x08005a44

08004618 <__swsetup_r>:
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <__swsetup_r+0xcc>)
 800461a:	b570      	push	{r4, r5, r6, lr}
 800461c:	681d      	ldr	r5, [r3, #0]
 800461e:	4606      	mov	r6, r0
 8004620:	460c      	mov	r4, r1
 8004622:	b125      	cbz	r5, 800462e <__swsetup_r+0x16>
 8004624:	69ab      	ldr	r3, [r5, #24]
 8004626:	b913      	cbnz	r3, 800462e <__swsetup_r+0x16>
 8004628:	4628      	mov	r0, r5
 800462a:	f000 f965 	bl	80048f8 <__sinit>
 800462e:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <__swsetup_r+0xd0>)
 8004630:	429c      	cmp	r4, r3
 8004632:	d10f      	bne.n	8004654 <__swsetup_r+0x3c>
 8004634:	686c      	ldr	r4, [r5, #4]
 8004636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800463a:	b29a      	uxth	r2, r3
 800463c:	0715      	lsls	r5, r2, #28
 800463e:	d42c      	bmi.n	800469a <__swsetup_r+0x82>
 8004640:	06d0      	lsls	r0, r2, #27
 8004642:	d411      	bmi.n	8004668 <__swsetup_r+0x50>
 8004644:	2209      	movs	r2, #9
 8004646:	6032      	str	r2, [r6, #0]
 8004648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	f04f 30ff 	mov.w	r0, #4294967295
 8004652:	e03e      	b.n	80046d2 <__swsetup_r+0xba>
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <__swsetup_r+0xd4>)
 8004656:	429c      	cmp	r4, r3
 8004658:	d101      	bne.n	800465e <__swsetup_r+0x46>
 800465a:	68ac      	ldr	r4, [r5, #8]
 800465c:	e7eb      	b.n	8004636 <__swsetup_r+0x1e>
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <__swsetup_r+0xd8>)
 8004660:	429c      	cmp	r4, r3
 8004662:	bf08      	it	eq
 8004664:	68ec      	ldreq	r4, [r5, #12]
 8004666:	e7e6      	b.n	8004636 <__swsetup_r+0x1e>
 8004668:	0751      	lsls	r1, r2, #29
 800466a:	d512      	bpl.n	8004692 <__swsetup_r+0x7a>
 800466c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800466e:	b141      	cbz	r1, 8004682 <__swsetup_r+0x6a>
 8004670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004674:	4299      	cmp	r1, r3
 8004676:	d002      	beq.n	800467e <__swsetup_r+0x66>
 8004678:	4630      	mov	r0, r6
 800467a:	f000 fa47 	bl	8004b0c <_free_r>
 800467e:	2300      	movs	r3, #0
 8004680:	6363      	str	r3, [r4, #52]	; 0x34
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	2300      	movs	r3, #0
 800468c:	6063      	str	r3, [r4, #4]
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	b94b      	cbnz	r3, 80046b2 <__swsetup_r+0x9a>
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d003      	beq.n	80046b2 <__swsetup_r+0x9a>
 80046aa:	4621      	mov	r1, r4
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 f9ed 	bl	8004a8c <__smakebuf_r>
 80046b2:	89a2      	ldrh	r2, [r4, #12]
 80046b4:	f012 0301 	ands.w	r3, r2, #1
 80046b8:	d00c      	beq.n	80046d4 <__swsetup_r+0xbc>
 80046ba:	2300      	movs	r3, #0
 80046bc:	60a3      	str	r3, [r4, #8]
 80046be:	6963      	ldr	r3, [r4, #20]
 80046c0:	425b      	negs	r3, r3
 80046c2:	61a3      	str	r3, [r4, #24]
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	b953      	cbnz	r3, 80046de <__swsetup_r+0xc6>
 80046c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80046d0:	d1ba      	bne.n	8004648 <__swsetup_r+0x30>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	0792      	lsls	r2, r2, #30
 80046d6:	bf58      	it	pl
 80046d8:	6963      	ldrpl	r3, [r4, #20]
 80046da:	60a3      	str	r3, [r4, #8]
 80046dc:	e7f2      	b.n	80046c4 <__swsetup_r+0xac>
 80046de:	2000      	movs	r0, #0
 80046e0:	e7f7      	b.n	80046d2 <__swsetup_r+0xba>
 80046e2:	bf00      	nop
 80046e4:	2000000c 	.word	0x2000000c
 80046e8:	08005a64 	.word	0x08005a64
 80046ec:	08005a84 	.word	0x08005a84
 80046f0:	08005a44 	.word	0x08005a44

080046f4 <__sflush_r>:
 80046f4:	898a      	ldrh	r2, [r1, #12]
 80046f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fa:	4605      	mov	r5, r0
 80046fc:	0710      	lsls	r0, r2, #28
 80046fe:	460c      	mov	r4, r1
 8004700:	d458      	bmi.n	80047b4 <__sflush_r+0xc0>
 8004702:	684b      	ldr	r3, [r1, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	dc05      	bgt.n	8004714 <__sflush_r+0x20>
 8004708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	dc02      	bgt.n	8004714 <__sflush_r+0x20>
 800470e:	2000      	movs	r0, #0
 8004710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004716:	2e00      	cmp	r6, #0
 8004718:	d0f9      	beq.n	800470e <__sflush_r+0x1a>
 800471a:	2300      	movs	r3, #0
 800471c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004720:	682f      	ldr	r7, [r5, #0]
 8004722:	6a21      	ldr	r1, [r4, #32]
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	d032      	beq.n	800478e <__sflush_r+0x9a>
 8004728:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	075a      	lsls	r2, r3, #29
 800472e:	d505      	bpl.n	800473c <__sflush_r+0x48>
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	1ac0      	subs	r0, r0, r3
 8004734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004736:	b10b      	cbz	r3, 800473c <__sflush_r+0x48>
 8004738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800473a:	1ac0      	subs	r0, r0, r3
 800473c:	2300      	movs	r3, #0
 800473e:	4602      	mov	r2, r0
 8004740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004742:	6a21      	ldr	r1, [r4, #32]
 8004744:	4628      	mov	r0, r5
 8004746:	47b0      	blx	r6
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	d106      	bne.n	800475c <__sflush_r+0x68>
 800474e:	6829      	ldr	r1, [r5, #0]
 8004750:	291d      	cmp	r1, #29
 8004752:	d848      	bhi.n	80047e6 <__sflush_r+0xf2>
 8004754:	4a29      	ldr	r2, [pc, #164]	; (80047fc <__sflush_r+0x108>)
 8004756:	40ca      	lsrs	r2, r1
 8004758:	07d6      	lsls	r6, r2, #31
 800475a:	d544      	bpl.n	80047e6 <__sflush_r+0xf2>
 800475c:	2200      	movs	r2, #0
 800475e:	6062      	str	r2, [r4, #4]
 8004760:	04d9      	lsls	r1, r3, #19
 8004762:	6922      	ldr	r2, [r4, #16]
 8004764:	6022      	str	r2, [r4, #0]
 8004766:	d504      	bpl.n	8004772 <__sflush_r+0x7e>
 8004768:	1c42      	adds	r2, r0, #1
 800476a:	d101      	bne.n	8004770 <__sflush_r+0x7c>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b903      	cbnz	r3, 8004772 <__sflush_r+0x7e>
 8004770:	6560      	str	r0, [r4, #84]	; 0x54
 8004772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004774:	602f      	str	r7, [r5, #0]
 8004776:	2900      	cmp	r1, #0
 8004778:	d0c9      	beq.n	800470e <__sflush_r+0x1a>
 800477a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800477e:	4299      	cmp	r1, r3
 8004780:	d002      	beq.n	8004788 <__sflush_r+0x94>
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f9c2 	bl	8004b0c <_free_r>
 8004788:	2000      	movs	r0, #0
 800478a:	6360      	str	r0, [r4, #52]	; 0x34
 800478c:	e7c0      	b.n	8004710 <__sflush_r+0x1c>
 800478e:	2301      	movs	r3, #1
 8004790:	4628      	mov	r0, r5
 8004792:	47b0      	blx	r6
 8004794:	1c41      	adds	r1, r0, #1
 8004796:	d1c8      	bne.n	800472a <__sflush_r+0x36>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0c5      	beq.n	800472a <__sflush_r+0x36>
 800479e:	2b1d      	cmp	r3, #29
 80047a0:	d001      	beq.n	80047a6 <__sflush_r+0xb2>
 80047a2:	2b16      	cmp	r3, #22
 80047a4:	d101      	bne.n	80047aa <__sflush_r+0xb6>
 80047a6:	602f      	str	r7, [r5, #0]
 80047a8:	e7b1      	b.n	800470e <__sflush_r+0x1a>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b0:	81a3      	strh	r3, [r4, #12]
 80047b2:	e7ad      	b.n	8004710 <__sflush_r+0x1c>
 80047b4:	690f      	ldr	r7, [r1, #16]
 80047b6:	2f00      	cmp	r7, #0
 80047b8:	d0a9      	beq.n	800470e <__sflush_r+0x1a>
 80047ba:	0793      	lsls	r3, r2, #30
 80047bc:	680e      	ldr	r6, [r1, #0]
 80047be:	bf08      	it	eq
 80047c0:	694b      	ldreq	r3, [r1, #20]
 80047c2:	600f      	str	r7, [r1, #0]
 80047c4:	bf18      	it	ne
 80047c6:	2300      	movne	r3, #0
 80047c8:	eba6 0807 	sub.w	r8, r6, r7
 80047cc:	608b      	str	r3, [r1, #8]
 80047ce:	f1b8 0f00 	cmp.w	r8, #0
 80047d2:	dd9c      	ble.n	800470e <__sflush_r+0x1a>
 80047d4:	4643      	mov	r3, r8
 80047d6:	463a      	mov	r2, r7
 80047d8:	6a21      	ldr	r1, [r4, #32]
 80047da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047dc:	4628      	mov	r0, r5
 80047de:	47b0      	blx	r6
 80047e0:	2800      	cmp	r0, #0
 80047e2:	dc06      	bgt.n	80047f2 <__sflush_r+0xfe>
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ea:	81a3      	strh	r3, [r4, #12]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	e78e      	b.n	8004710 <__sflush_r+0x1c>
 80047f2:	4407      	add	r7, r0
 80047f4:	eba8 0800 	sub.w	r8, r8, r0
 80047f8:	e7e9      	b.n	80047ce <__sflush_r+0xda>
 80047fa:	bf00      	nop
 80047fc:	20400001 	.word	0x20400001

08004800 <_fflush_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	690b      	ldr	r3, [r1, #16]
 8004804:	4605      	mov	r5, r0
 8004806:	460c      	mov	r4, r1
 8004808:	b1db      	cbz	r3, 8004842 <_fflush_r+0x42>
 800480a:	b118      	cbz	r0, 8004814 <_fflush_r+0x14>
 800480c:	6983      	ldr	r3, [r0, #24]
 800480e:	b90b      	cbnz	r3, 8004814 <_fflush_r+0x14>
 8004810:	f000 f872 	bl	80048f8 <__sinit>
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <_fflush_r+0x48>)
 8004816:	429c      	cmp	r4, r3
 8004818:	d109      	bne.n	800482e <_fflush_r+0x2e>
 800481a:	686c      	ldr	r4, [r5, #4]
 800481c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004820:	b17b      	cbz	r3, 8004842 <_fflush_r+0x42>
 8004822:	4621      	mov	r1, r4
 8004824:	4628      	mov	r0, r5
 8004826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800482a:	f7ff bf63 	b.w	80046f4 <__sflush_r>
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <_fflush_r+0x4c>)
 8004830:	429c      	cmp	r4, r3
 8004832:	d101      	bne.n	8004838 <_fflush_r+0x38>
 8004834:	68ac      	ldr	r4, [r5, #8]
 8004836:	e7f1      	b.n	800481c <_fflush_r+0x1c>
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <_fflush_r+0x50>)
 800483a:	429c      	cmp	r4, r3
 800483c:	bf08      	it	eq
 800483e:	68ec      	ldreq	r4, [r5, #12]
 8004840:	e7ec      	b.n	800481c <_fflush_r+0x1c>
 8004842:	2000      	movs	r0, #0
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	bf00      	nop
 8004848:	08005a64 	.word	0x08005a64
 800484c:	08005a84 	.word	0x08005a84
 8004850:	08005a44 	.word	0x08005a44

08004854 <fflush>:
 8004854:	4601      	mov	r1, r0
 8004856:	b920      	cbnz	r0, 8004862 <fflush+0xe>
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <fflush+0x18>)
 800485a:	4905      	ldr	r1, [pc, #20]	; (8004870 <fflush+0x1c>)
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f000 b8d3 	b.w	8004a08 <_fwalk_reent>
 8004862:	4b04      	ldr	r3, [pc, #16]	; (8004874 <fflush+0x20>)
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f7ff bfcb 	b.w	8004800 <_fflush_r>
 800486a:	bf00      	nop
 800486c:	08005a40 	.word	0x08005a40
 8004870:	08004801 	.word	0x08004801
 8004874:	2000000c 	.word	0x2000000c

08004878 <std>:
 8004878:	2300      	movs	r3, #0
 800487a:	b510      	push	{r4, lr}
 800487c:	4604      	mov	r4, r0
 800487e:	e9c0 3300 	strd	r3, r3, [r0]
 8004882:	6083      	str	r3, [r0, #8]
 8004884:	8181      	strh	r1, [r0, #12]
 8004886:	6643      	str	r3, [r0, #100]	; 0x64
 8004888:	81c2      	strh	r2, [r0, #14]
 800488a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800488e:	6183      	str	r3, [r0, #24]
 8004890:	4619      	mov	r1, r3
 8004892:	2208      	movs	r2, #8
 8004894:	305c      	adds	r0, #92	; 0x5c
 8004896:	f7ff fde9 	bl	800446c <memset>
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <std+0x38>)
 800489c:	6263      	str	r3, [r4, #36]	; 0x24
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <std+0x3c>)
 80048a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <std+0x40>)
 80048a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <std+0x44>)
 80048a8:	6224      	str	r4, [r4, #32]
 80048aa:	6323      	str	r3, [r4, #48]	; 0x30
 80048ac:	bd10      	pop	{r4, pc}
 80048ae:	bf00      	nop
 80048b0:	080053ad 	.word	0x080053ad
 80048b4:	080053cf 	.word	0x080053cf
 80048b8:	08005407 	.word	0x08005407
 80048bc:	0800542b 	.word	0x0800542b

080048c0 <_cleanup_r>:
 80048c0:	4901      	ldr	r1, [pc, #4]	; (80048c8 <_cleanup_r+0x8>)
 80048c2:	f000 b8a1 	b.w	8004a08 <_fwalk_reent>
 80048c6:	bf00      	nop
 80048c8:	08004801 	.word	0x08004801

080048cc <__sfmoreglue>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	1e4a      	subs	r2, r1, #1
 80048d0:	2568      	movs	r5, #104	; 0x68
 80048d2:	4355      	muls	r5, r2
 80048d4:	460e      	mov	r6, r1
 80048d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048da:	f000 f965 	bl	8004ba8 <_malloc_r>
 80048de:	4604      	mov	r4, r0
 80048e0:	b140      	cbz	r0, 80048f4 <__sfmoreglue+0x28>
 80048e2:	2100      	movs	r1, #0
 80048e4:	e9c0 1600 	strd	r1, r6, [r0]
 80048e8:	300c      	adds	r0, #12
 80048ea:	60a0      	str	r0, [r4, #8]
 80048ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048f0:	f7ff fdbc 	bl	800446c <memset>
 80048f4:	4620      	mov	r0, r4
 80048f6:	bd70      	pop	{r4, r5, r6, pc}

080048f8 <__sinit>:
 80048f8:	6983      	ldr	r3, [r0, #24]
 80048fa:	b510      	push	{r4, lr}
 80048fc:	4604      	mov	r4, r0
 80048fe:	bb33      	cbnz	r3, 800494e <__sinit+0x56>
 8004900:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004904:	6503      	str	r3, [r0, #80]	; 0x50
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <__sinit+0x58>)
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <__sinit+0x5c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6282      	str	r2, [r0, #40]	; 0x28
 800490e:	4298      	cmp	r0, r3
 8004910:	bf04      	itt	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	6183      	streq	r3, [r0, #24]
 8004916:	f000 f81f 	bl	8004958 <__sfp>
 800491a:	6060      	str	r0, [r4, #4]
 800491c:	4620      	mov	r0, r4
 800491e:	f000 f81b 	bl	8004958 <__sfp>
 8004922:	60a0      	str	r0, [r4, #8]
 8004924:	4620      	mov	r0, r4
 8004926:	f000 f817 	bl	8004958 <__sfp>
 800492a:	2200      	movs	r2, #0
 800492c:	60e0      	str	r0, [r4, #12]
 800492e:	2104      	movs	r1, #4
 8004930:	6860      	ldr	r0, [r4, #4]
 8004932:	f7ff ffa1 	bl	8004878 <std>
 8004936:	2201      	movs	r2, #1
 8004938:	2109      	movs	r1, #9
 800493a:	68a0      	ldr	r0, [r4, #8]
 800493c:	f7ff ff9c 	bl	8004878 <std>
 8004940:	2202      	movs	r2, #2
 8004942:	2112      	movs	r1, #18
 8004944:	68e0      	ldr	r0, [r4, #12]
 8004946:	f7ff ff97 	bl	8004878 <std>
 800494a:	2301      	movs	r3, #1
 800494c:	61a3      	str	r3, [r4, #24]
 800494e:	bd10      	pop	{r4, pc}
 8004950:	08005a40 	.word	0x08005a40
 8004954:	080048c1 	.word	0x080048c1

08004958 <__sfp>:
 8004958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <__sfp+0x70>)
 800495c:	681e      	ldr	r6, [r3, #0]
 800495e:	69b3      	ldr	r3, [r6, #24]
 8004960:	4607      	mov	r7, r0
 8004962:	b913      	cbnz	r3, 800496a <__sfp+0x12>
 8004964:	4630      	mov	r0, r6
 8004966:	f7ff ffc7 	bl	80048f8 <__sinit>
 800496a:	3648      	adds	r6, #72	; 0x48
 800496c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004970:	3b01      	subs	r3, #1
 8004972:	d503      	bpl.n	800497c <__sfp+0x24>
 8004974:	6833      	ldr	r3, [r6, #0]
 8004976:	b133      	cbz	r3, 8004986 <__sfp+0x2e>
 8004978:	6836      	ldr	r6, [r6, #0]
 800497a:	e7f7      	b.n	800496c <__sfp+0x14>
 800497c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004980:	b16d      	cbz	r5, 800499e <__sfp+0x46>
 8004982:	3468      	adds	r4, #104	; 0x68
 8004984:	e7f4      	b.n	8004970 <__sfp+0x18>
 8004986:	2104      	movs	r1, #4
 8004988:	4638      	mov	r0, r7
 800498a:	f7ff ff9f 	bl	80048cc <__sfmoreglue>
 800498e:	6030      	str	r0, [r6, #0]
 8004990:	2800      	cmp	r0, #0
 8004992:	d1f1      	bne.n	8004978 <__sfp+0x20>
 8004994:	230c      	movs	r3, #12
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4604      	mov	r4, r0
 800499a:	4620      	mov	r0, r4
 800499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <__sfp+0x74>)
 80049a0:	6665      	str	r5, [r4, #100]	; 0x64
 80049a2:	e9c4 5500 	strd	r5, r5, [r4]
 80049a6:	60a5      	str	r5, [r4, #8]
 80049a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80049ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80049b0:	2208      	movs	r2, #8
 80049b2:	4629      	mov	r1, r5
 80049b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049b8:	f7ff fd58 	bl	800446c <memset>
 80049bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80049c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80049c4:	e7e9      	b.n	800499a <__sfp+0x42>
 80049c6:	bf00      	nop
 80049c8:	08005a40 	.word	0x08005a40
 80049cc:	ffff0001 	.word	0xffff0001

080049d0 <_fwalk>:
 80049d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d4:	4688      	mov	r8, r1
 80049d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049da:	2600      	movs	r6, #0
 80049dc:	b914      	cbnz	r4, 80049e4 <_fwalk+0x14>
 80049de:	4630      	mov	r0, r6
 80049e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e4:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80049e8:	3f01      	subs	r7, #1
 80049ea:	d501      	bpl.n	80049f0 <_fwalk+0x20>
 80049ec:	6824      	ldr	r4, [r4, #0]
 80049ee:	e7f5      	b.n	80049dc <_fwalk+0xc>
 80049f0:	89ab      	ldrh	r3, [r5, #12]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d906      	bls.n	8004a04 <_fwalk+0x34>
 80049f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049fa:	3301      	adds	r3, #1
 80049fc:	d002      	beq.n	8004a04 <_fwalk+0x34>
 80049fe:	4628      	mov	r0, r5
 8004a00:	47c0      	blx	r8
 8004a02:	4306      	orrs	r6, r0
 8004a04:	3568      	adds	r5, #104	; 0x68
 8004a06:	e7ef      	b.n	80049e8 <_fwalk+0x18>

08004a08 <_fwalk_reent>:
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	4680      	mov	r8, r0
 8004a0e:	4689      	mov	r9, r1
 8004a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a14:	2600      	movs	r6, #0
 8004a16:	b914      	cbnz	r4, 8004a1e <_fwalk_reent+0x16>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004a22:	3f01      	subs	r7, #1
 8004a24:	d501      	bpl.n	8004a2a <_fwalk_reent+0x22>
 8004a26:	6824      	ldr	r4, [r4, #0]
 8004a28:	e7f5      	b.n	8004a16 <_fwalk_reent+0xe>
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d907      	bls.n	8004a40 <_fwalk_reent+0x38>
 8004a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a34:	3301      	adds	r3, #1
 8004a36:	d003      	beq.n	8004a40 <_fwalk_reent+0x38>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	47c8      	blx	r9
 8004a3e:	4306      	orrs	r6, r0
 8004a40:	3568      	adds	r5, #104	; 0x68
 8004a42:	e7ee      	b.n	8004a22 <_fwalk_reent+0x1a>

08004a44 <__swhatbuf_r>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	460e      	mov	r6, r1
 8004a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4c:	2900      	cmp	r1, #0
 8004a4e:	b096      	sub	sp, #88	; 0x58
 8004a50:	4614      	mov	r4, r2
 8004a52:	461d      	mov	r5, r3
 8004a54:	da07      	bge.n	8004a66 <__swhatbuf_r+0x22>
 8004a56:	2300      	movs	r3, #0
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	89b3      	ldrh	r3, [r6, #12]
 8004a5c:	061a      	lsls	r2, r3, #24
 8004a5e:	d410      	bmi.n	8004a82 <__swhatbuf_r+0x3e>
 8004a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a64:	e00e      	b.n	8004a84 <__swhatbuf_r+0x40>
 8004a66:	466a      	mov	r2, sp
 8004a68:	f000 feca 	bl	8005800 <_fstat_r>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	dbf2      	blt.n	8004a56 <__swhatbuf_r+0x12>
 8004a70:	9a01      	ldr	r2, [sp, #4]
 8004a72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a7a:	425a      	negs	r2, r3
 8004a7c:	415a      	adcs	r2, r3
 8004a7e:	602a      	str	r2, [r5, #0]
 8004a80:	e7ee      	b.n	8004a60 <__swhatbuf_r+0x1c>
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	2000      	movs	r0, #0
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	b016      	add	sp, #88	; 0x58
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}

08004a8c <__smakebuf_r>:
 8004a8c:	898b      	ldrh	r3, [r1, #12]
 8004a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a90:	079d      	lsls	r5, r3, #30
 8004a92:	4606      	mov	r6, r0
 8004a94:	460c      	mov	r4, r1
 8004a96:	d507      	bpl.n	8004aa8 <__smakebuf_r+0x1c>
 8004a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	6123      	str	r3, [r4, #16]
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	6163      	str	r3, [r4, #20]
 8004aa4:	b002      	add	sp, #8
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	ab01      	add	r3, sp, #4
 8004aaa:	466a      	mov	r2, sp
 8004aac:	f7ff ffca 	bl	8004a44 <__swhatbuf_r>
 8004ab0:	9900      	ldr	r1, [sp, #0]
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f000 f877 	bl	8004ba8 <_malloc_r>
 8004aba:	b948      	cbnz	r0, 8004ad0 <__smakebuf_r+0x44>
 8004abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac0:	059a      	lsls	r2, r3, #22
 8004ac2:	d4ef      	bmi.n	8004aa4 <__smakebuf_r+0x18>
 8004ac4:	f023 0303 	bic.w	r3, r3, #3
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	e7e3      	b.n	8004a98 <__smakebuf_r+0xc>
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <__smakebuf_r+0x7c>)
 8004ad2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	6020      	str	r0, [r4, #0]
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	9b00      	ldr	r3, [sp, #0]
 8004ae0:	6163      	str	r3, [r4, #20]
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	6120      	str	r0, [r4, #16]
 8004ae6:	b15b      	cbz	r3, 8004b00 <__smakebuf_r+0x74>
 8004ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 fe99 	bl	8005824 <_isatty_r>
 8004af2:	b128      	cbz	r0, 8004b00 <__smakebuf_r+0x74>
 8004af4:	89a3      	ldrh	r3, [r4, #12]
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	431d      	orrs	r5, r3
 8004b04:	81a5      	strh	r5, [r4, #12]
 8004b06:	e7cd      	b.n	8004aa4 <__smakebuf_r+0x18>
 8004b08:	080048c1 	.word	0x080048c1

08004b0c <_free_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4605      	mov	r5, r0
 8004b10:	2900      	cmp	r1, #0
 8004b12:	d045      	beq.n	8004ba0 <_free_r+0x94>
 8004b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b18:	1f0c      	subs	r4, r1, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bfb8      	it	lt
 8004b1e:	18e4      	addlt	r4, r4, r3
 8004b20:	f000 fed1 	bl	80058c6 <__malloc_lock>
 8004b24:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <_free_r+0x98>)
 8004b26:	6813      	ldr	r3, [r2, #0]
 8004b28:	4610      	mov	r0, r2
 8004b2a:	b933      	cbnz	r3, 8004b3a <_free_r+0x2e>
 8004b2c:	6063      	str	r3, [r4, #4]
 8004b2e:	6014      	str	r4, [r2, #0]
 8004b30:	4628      	mov	r0, r5
 8004b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b36:	f000 bec7 	b.w	80058c8 <__malloc_unlock>
 8004b3a:	42a3      	cmp	r3, r4
 8004b3c:	d90c      	bls.n	8004b58 <_free_r+0x4c>
 8004b3e:	6821      	ldr	r1, [r4, #0]
 8004b40:	1862      	adds	r2, r4, r1
 8004b42:	4293      	cmp	r3, r2
 8004b44:	bf04      	itt	eq
 8004b46:	681a      	ldreq	r2, [r3, #0]
 8004b48:	685b      	ldreq	r3, [r3, #4]
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	bf04      	itt	eq
 8004b4e:	1852      	addeq	r2, r2, r1
 8004b50:	6022      	streq	r2, [r4, #0]
 8004b52:	6004      	str	r4, [r0, #0]
 8004b54:	e7ec      	b.n	8004b30 <_free_r+0x24>
 8004b56:	4613      	mov	r3, r2
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	b10a      	cbz	r2, 8004b60 <_free_r+0x54>
 8004b5c:	42a2      	cmp	r2, r4
 8004b5e:	d9fa      	bls.n	8004b56 <_free_r+0x4a>
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	1858      	adds	r0, r3, r1
 8004b64:	42a0      	cmp	r0, r4
 8004b66:	d10b      	bne.n	8004b80 <_free_r+0x74>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	4401      	add	r1, r0
 8004b6c:	1858      	adds	r0, r3, r1
 8004b6e:	4282      	cmp	r2, r0
 8004b70:	6019      	str	r1, [r3, #0]
 8004b72:	d1dd      	bne.n	8004b30 <_free_r+0x24>
 8004b74:	6810      	ldr	r0, [r2, #0]
 8004b76:	6852      	ldr	r2, [r2, #4]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	4401      	add	r1, r0
 8004b7c:	6019      	str	r1, [r3, #0]
 8004b7e:	e7d7      	b.n	8004b30 <_free_r+0x24>
 8004b80:	d902      	bls.n	8004b88 <_free_r+0x7c>
 8004b82:	230c      	movs	r3, #12
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	e7d3      	b.n	8004b30 <_free_r+0x24>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	1821      	adds	r1, r4, r0
 8004b8c:	428a      	cmp	r2, r1
 8004b8e:	bf04      	itt	eq
 8004b90:	6811      	ldreq	r1, [r2, #0]
 8004b92:	6852      	ldreq	r2, [r2, #4]
 8004b94:	6062      	str	r2, [r4, #4]
 8004b96:	bf04      	itt	eq
 8004b98:	1809      	addeq	r1, r1, r0
 8004b9a:	6021      	streq	r1, [r4, #0]
 8004b9c:	605c      	str	r4, [r3, #4]
 8004b9e:	e7c7      	b.n	8004b30 <_free_r+0x24>
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200001fc 	.word	0x200001fc

08004ba8 <_malloc_r>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	1ccd      	adds	r5, r1, #3
 8004bac:	f025 0503 	bic.w	r5, r5, #3
 8004bb0:	3508      	adds	r5, #8
 8004bb2:	2d0c      	cmp	r5, #12
 8004bb4:	bf38      	it	cc
 8004bb6:	250c      	movcc	r5, #12
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	4606      	mov	r6, r0
 8004bbc:	db01      	blt.n	8004bc2 <_malloc_r+0x1a>
 8004bbe:	42a9      	cmp	r1, r5
 8004bc0:	d903      	bls.n	8004bca <_malloc_r+0x22>
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	6033      	str	r3, [r6, #0]
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	bd70      	pop	{r4, r5, r6, pc}
 8004bca:	f000 fe7c 	bl	80058c6 <__malloc_lock>
 8004bce:	4a21      	ldr	r2, [pc, #132]	; (8004c54 <_malloc_r+0xac>)
 8004bd0:	6814      	ldr	r4, [r2, #0]
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	b991      	cbnz	r1, 8004bfc <_malloc_r+0x54>
 8004bd6:	4c20      	ldr	r4, [pc, #128]	; (8004c58 <_malloc_r+0xb0>)
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	b91b      	cbnz	r3, 8004be4 <_malloc_r+0x3c>
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 fba3 	bl	8005328 <_sbrk_r>
 8004be2:	6020      	str	r0, [r4, #0]
 8004be4:	4629      	mov	r1, r5
 8004be6:	4630      	mov	r0, r6
 8004be8:	f000 fb9e 	bl	8005328 <_sbrk_r>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d124      	bne.n	8004c3a <_malloc_r+0x92>
 8004bf0:	230c      	movs	r3, #12
 8004bf2:	6033      	str	r3, [r6, #0]
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 fe67 	bl	80058c8 <__malloc_unlock>
 8004bfa:	e7e4      	b.n	8004bc6 <_malloc_r+0x1e>
 8004bfc:	680b      	ldr	r3, [r1, #0]
 8004bfe:	1b5b      	subs	r3, r3, r5
 8004c00:	d418      	bmi.n	8004c34 <_malloc_r+0x8c>
 8004c02:	2b0b      	cmp	r3, #11
 8004c04:	d90f      	bls.n	8004c26 <_malloc_r+0x7e>
 8004c06:	600b      	str	r3, [r1, #0]
 8004c08:	50cd      	str	r5, [r1, r3]
 8004c0a:	18cc      	adds	r4, r1, r3
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f000 fe5b 	bl	80058c8 <__malloc_unlock>
 8004c12:	f104 000b 	add.w	r0, r4, #11
 8004c16:	1d23      	adds	r3, r4, #4
 8004c18:	f020 0007 	bic.w	r0, r0, #7
 8004c1c:	1ac3      	subs	r3, r0, r3
 8004c1e:	d0d3      	beq.n	8004bc8 <_malloc_r+0x20>
 8004c20:	425a      	negs	r2, r3
 8004c22:	50e2      	str	r2, [r4, r3]
 8004c24:	e7d0      	b.n	8004bc8 <_malloc_r+0x20>
 8004c26:	428c      	cmp	r4, r1
 8004c28:	684b      	ldr	r3, [r1, #4]
 8004c2a:	bf16      	itet	ne
 8004c2c:	6063      	strne	r3, [r4, #4]
 8004c2e:	6013      	streq	r3, [r2, #0]
 8004c30:	460c      	movne	r4, r1
 8004c32:	e7eb      	b.n	8004c0c <_malloc_r+0x64>
 8004c34:	460c      	mov	r4, r1
 8004c36:	6849      	ldr	r1, [r1, #4]
 8004c38:	e7cc      	b.n	8004bd4 <_malloc_r+0x2c>
 8004c3a:	1cc4      	adds	r4, r0, #3
 8004c3c:	f024 0403 	bic.w	r4, r4, #3
 8004c40:	42a0      	cmp	r0, r4
 8004c42:	d005      	beq.n	8004c50 <_malloc_r+0xa8>
 8004c44:	1a21      	subs	r1, r4, r0
 8004c46:	4630      	mov	r0, r6
 8004c48:	f000 fb6e 	bl	8005328 <_sbrk_r>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d0cf      	beq.n	8004bf0 <_malloc_r+0x48>
 8004c50:	6025      	str	r5, [r4, #0]
 8004c52:	e7db      	b.n	8004c0c <_malloc_r+0x64>
 8004c54:	200001fc 	.word	0x200001fc
 8004c58:	20000200 	.word	0x20000200

08004c5c <__svfiscanf_r>:
 8004c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c60:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004c64:	460c      	mov	r4, r1
 8004c66:	2100      	movs	r1, #0
 8004c68:	9144      	str	r1, [sp, #272]	; 0x110
 8004c6a:	9145      	str	r1, [sp, #276]	; 0x114
 8004c6c:	499f      	ldr	r1, [pc, #636]	; (8004eec <__svfiscanf_r+0x290>)
 8004c6e:	91a0      	str	r1, [sp, #640]	; 0x280
 8004c70:	f10d 0804 	add.w	r8, sp, #4
 8004c74:	499e      	ldr	r1, [pc, #632]	; (8004ef0 <__svfiscanf_r+0x294>)
 8004c76:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8004ef4 <__svfiscanf_r+0x298>
 8004c7a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004c7e:	4606      	mov	r6, r0
 8004c80:	4692      	mov	sl, r2
 8004c82:	91a1      	str	r1, [sp, #644]	; 0x284
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	270a      	movs	r7, #10
 8004c88:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 812a 	beq.w	8004ee6 <__svfiscanf_r+0x28a>
 8004c92:	4655      	mov	r5, sl
 8004c94:	f000 fdda 	bl	800584c <__locale_ctype_ptr>
 8004c98:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004c9c:	4458      	add	r0, fp
 8004c9e:	7843      	ldrb	r3, [r0, #1]
 8004ca0:	f013 0308 	ands.w	r3, r3, #8
 8004ca4:	d01c      	beq.n	8004ce0 <__svfiscanf_r+0x84>
 8004ca6:	6863      	ldr	r3, [r4, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dd12      	ble.n	8004cd2 <__svfiscanf_r+0x76>
 8004cac:	f000 fdce 	bl	800584c <__locale_ctype_ptr>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	4410      	add	r0, r2
 8004cb6:	7842      	ldrb	r2, [r0, #1]
 8004cb8:	0712      	lsls	r2, r2, #28
 8004cba:	d401      	bmi.n	8004cc0 <__svfiscanf_r+0x64>
 8004cbc:	46aa      	mov	sl, r5
 8004cbe:	e7e3      	b.n	8004c88 <__svfiscanf_r+0x2c>
 8004cc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004cc2:	3201      	adds	r2, #1
 8004cc4:	9245      	str	r2, [sp, #276]	; 0x114
 8004cc6:	6862      	ldr	r2, [r4, #4]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	6062      	str	r2, [r4, #4]
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	e7e9      	b.n	8004ca6 <__svfiscanf_r+0x4a>
 8004cd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	4798      	blx	r3
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d0e6      	beq.n	8004cac <__svfiscanf_r+0x50>
 8004cde:	e7ed      	b.n	8004cbc <__svfiscanf_r+0x60>
 8004ce0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004ce4:	f040 8082 	bne.w	8004dec <__svfiscanf_r+0x190>
 8004ce8:	9343      	str	r3, [sp, #268]	; 0x10c
 8004cea:	9341      	str	r3, [sp, #260]	; 0x104
 8004cec:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf2:	d103      	bne.n	8004cfc <__svfiscanf_r+0xa0>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	9341      	str	r3, [sp, #260]	; 0x104
 8004cf8:	f10a 0502 	add.w	r5, sl, #2
 8004cfc:	46aa      	mov	sl, r5
 8004cfe:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004d02:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004d06:	2a09      	cmp	r2, #9
 8004d08:	d922      	bls.n	8004d50 <__svfiscanf_r+0xf4>
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	4879      	ldr	r0, [pc, #484]	; (8004ef4 <__svfiscanf_r+0x298>)
 8004d0e:	f7fb fa5f 	bl	80001d0 <memchr>
 8004d12:	b138      	cbz	r0, 8004d24 <__svfiscanf_r+0xc8>
 8004d14:	eba0 0309 	sub.w	r3, r0, r9
 8004d18:	2001      	movs	r0, #1
 8004d1a:	4098      	lsls	r0, r3
 8004d1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d1e:	4318      	orrs	r0, r3
 8004d20:	9041      	str	r0, [sp, #260]	; 0x104
 8004d22:	46aa      	mov	sl, r5
 8004d24:	f89a 3000 	ldrb.w	r3, [sl]
 8004d28:	2b67      	cmp	r3, #103	; 0x67
 8004d2a:	f10a 0501 	add.w	r5, sl, #1
 8004d2e:	d82b      	bhi.n	8004d88 <__svfiscanf_r+0x12c>
 8004d30:	2b65      	cmp	r3, #101	; 0x65
 8004d32:	f080 809f 	bcs.w	8004e74 <__svfiscanf_r+0x218>
 8004d36:	2b47      	cmp	r3, #71	; 0x47
 8004d38:	d810      	bhi.n	8004d5c <__svfiscanf_r+0x100>
 8004d3a:	2b45      	cmp	r3, #69	; 0x45
 8004d3c:	f080 809a 	bcs.w	8004e74 <__svfiscanf_r+0x218>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d06c      	beq.n	8004e1e <__svfiscanf_r+0x1c2>
 8004d44:	2b25      	cmp	r3, #37	; 0x25
 8004d46:	d051      	beq.n	8004dec <__svfiscanf_r+0x190>
 8004d48:	2303      	movs	r3, #3
 8004d4a:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d4c:	9742      	str	r7, [sp, #264]	; 0x108
 8004d4e:	e027      	b.n	8004da0 <__svfiscanf_r+0x144>
 8004d50:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004d52:	fb07 1303 	mla	r3, r7, r3, r1
 8004d56:	3b30      	subs	r3, #48	; 0x30
 8004d58:	9343      	str	r3, [sp, #268]	; 0x10c
 8004d5a:	e7cf      	b.n	8004cfc <__svfiscanf_r+0xa0>
 8004d5c:	2b5b      	cmp	r3, #91	; 0x5b
 8004d5e:	d06a      	beq.n	8004e36 <__svfiscanf_r+0x1da>
 8004d60:	d80c      	bhi.n	8004d7c <__svfiscanf_r+0x120>
 8004d62:	2b58      	cmp	r3, #88	; 0x58
 8004d64:	d1f0      	bne.n	8004d48 <__svfiscanf_r+0xec>
 8004d66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6c:	9241      	str	r2, [sp, #260]	; 0x104
 8004d6e:	2210      	movs	r2, #16
 8004d70:	9242      	str	r2, [sp, #264]	; 0x108
 8004d72:	2b6e      	cmp	r3, #110	; 0x6e
 8004d74:	bf8c      	ite	hi
 8004d76:	2304      	movhi	r3, #4
 8004d78:	2303      	movls	r3, #3
 8004d7a:	e010      	b.n	8004d9e <__svfiscanf_r+0x142>
 8004d7c:	2b63      	cmp	r3, #99	; 0x63
 8004d7e:	d065      	beq.n	8004e4c <__svfiscanf_r+0x1f0>
 8004d80:	2b64      	cmp	r3, #100	; 0x64
 8004d82:	d1e1      	bne.n	8004d48 <__svfiscanf_r+0xec>
 8004d84:	9742      	str	r7, [sp, #264]	; 0x108
 8004d86:	e7f4      	b.n	8004d72 <__svfiscanf_r+0x116>
 8004d88:	2b70      	cmp	r3, #112	; 0x70
 8004d8a:	d04b      	beq.n	8004e24 <__svfiscanf_r+0x1c8>
 8004d8c:	d826      	bhi.n	8004ddc <__svfiscanf_r+0x180>
 8004d8e:	2b6e      	cmp	r3, #110	; 0x6e
 8004d90:	d062      	beq.n	8004e58 <__svfiscanf_r+0x1fc>
 8004d92:	d84c      	bhi.n	8004e2e <__svfiscanf_r+0x1d2>
 8004d94:	2b69      	cmp	r3, #105	; 0x69
 8004d96:	d1d7      	bne.n	8004d48 <__svfiscanf_r+0xec>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9342      	str	r3, [sp, #264]	; 0x108
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004da0:	6863      	ldr	r3, [r4, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dd68      	ble.n	8004e78 <__svfiscanf_r+0x21c>
 8004da6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004da8:	0659      	lsls	r1, r3, #25
 8004daa:	d407      	bmi.n	8004dbc <__svfiscanf_r+0x160>
 8004dac:	f000 fd4e 	bl	800584c <__locale_ctype_ptr>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	4410      	add	r0, r2
 8004db6:	7842      	ldrb	r2, [r0, #1]
 8004db8:	0712      	lsls	r2, r2, #28
 8004dba:	d464      	bmi.n	8004e86 <__svfiscanf_r+0x22a>
 8004dbc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	dc73      	bgt.n	8004eaa <__svfiscanf_r+0x24e>
 8004dc2:	466b      	mov	r3, sp
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	a941      	add	r1, sp, #260	; 0x104
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f000 f8bf 	bl	8004f4c <_scanf_chars>
 8004dce:	2801      	cmp	r0, #1
 8004dd0:	f000 8089 	beq.w	8004ee6 <__svfiscanf_r+0x28a>
 8004dd4:	2802      	cmp	r0, #2
 8004dd6:	f47f af71 	bne.w	8004cbc <__svfiscanf_r+0x60>
 8004dda:	e01d      	b.n	8004e18 <__svfiscanf_r+0x1bc>
 8004ddc:	2b75      	cmp	r3, #117	; 0x75
 8004dde:	d0d1      	beq.n	8004d84 <__svfiscanf_r+0x128>
 8004de0:	2b78      	cmp	r3, #120	; 0x78
 8004de2:	d0c0      	beq.n	8004d66 <__svfiscanf_r+0x10a>
 8004de4:	2b73      	cmp	r3, #115	; 0x73
 8004de6:	d1af      	bne.n	8004d48 <__svfiscanf_r+0xec>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e7d8      	b.n	8004d9e <__svfiscanf_r+0x142>
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dd0c      	ble.n	8004e0c <__svfiscanf_r+0x1b0>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	455a      	cmp	r2, fp
 8004df8:	d175      	bne.n	8004ee6 <__svfiscanf_r+0x28a>
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	6862      	ldr	r2, [r4, #4]
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004e02:	3a01      	subs	r2, #1
 8004e04:	3301      	adds	r3, #1
 8004e06:	6062      	str	r2, [r4, #4]
 8004e08:	9345      	str	r3, [sp, #276]	; 0x114
 8004e0a:	e757      	b.n	8004cbc <__svfiscanf_r+0x60>
 8004e0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4630      	mov	r0, r6
 8004e12:	4798      	blx	r3
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d0ec      	beq.n	8004df2 <__svfiscanf_r+0x196>
 8004e18:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d159      	bne.n	8004ed2 <__svfiscanf_r+0x276>
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e22:	e05c      	b.n	8004ede <__svfiscanf_r+0x282>
 8004e24:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e26:	f042 0220 	orr.w	r2, r2, #32
 8004e2a:	9241      	str	r2, [sp, #260]	; 0x104
 8004e2c:	e79b      	b.n	8004d66 <__svfiscanf_r+0x10a>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	9342      	str	r3, [sp, #264]	; 0x108
 8004e32:	2304      	movs	r3, #4
 8004e34:	e7b3      	b.n	8004d9e <__svfiscanf_r+0x142>
 8004e36:	4629      	mov	r1, r5
 8004e38:	4640      	mov	r0, r8
 8004e3a:	f000 fa85 	bl	8005348 <__sccl>
 8004e3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e44:	9341      	str	r3, [sp, #260]	; 0x104
 8004e46:	4605      	mov	r5, r0
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e7a8      	b.n	8004d9e <__svfiscanf_r+0x142>
 8004e4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e52:	9341      	str	r3, [sp, #260]	; 0x104
 8004e54:	2300      	movs	r3, #0
 8004e56:	e7a2      	b.n	8004d9e <__svfiscanf_r+0x142>
 8004e58:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004e5a:	06c3      	lsls	r3, r0, #27
 8004e5c:	f53f af2e 	bmi.w	8004cbc <__svfiscanf_r+0x60>
 8004e60:	9b00      	ldr	r3, [sp, #0]
 8004e62:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e64:	1d19      	adds	r1, r3, #4
 8004e66:	9100      	str	r1, [sp, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	07c0      	lsls	r0, r0, #31
 8004e6c:	bf4c      	ite	mi
 8004e6e:	801a      	strhmi	r2, [r3, #0]
 8004e70:	601a      	strpl	r2, [r3, #0]
 8004e72:	e723      	b.n	8004cbc <__svfiscanf_r+0x60>
 8004e74:	2305      	movs	r3, #5
 8004e76:	e792      	b.n	8004d9e <__svfiscanf_r+0x142>
 8004e78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	4798      	blx	r3
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d090      	beq.n	8004da6 <__svfiscanf_r+0x14a>
 8004e84:	e7c8      	b.n	8004e18 <__svfiscanf_r+0x1bc>
 8004e86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e88:	3201      	adds	r2, #1
 8004e8a:	9245      	str	r2, [sp, #276]	; 0x114
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	3a01      	subs	r2, #1
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	6062      	str	r2, [r4, #4]
 8004e94:	dd02      	ble.n	8004e9c <__svfiscanf_r+0x240>
 8004e96:	3301      	adds	r3, #1
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	e787      	b.n	8004dac <__svfiscanf_r+0x150>
 8004e9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4798      	blx	r3
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d081      	beq.n	8004dac <__svfiscanf_r+0x150>
 8004ea8:	e7b6      	b.n	8004e18 <__svfiscanf_r+0x1bc>
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	dc06      	bgt.n	8004ebc <__svfiscanf_r+0x260>
 8004eae:	466b      	mov	r3, sp
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	a941      	add	r1, sp, #260	; 0x104
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	f000 f8ad 	bl	8005014 <_scanf_i>
 8004eba:	e788      	b.n	8004dce <__svfiscanf_r+0x172>
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <__svfiscanf_r+0x29c>)
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f43f aefc 	beq.w	8004cbc <__svfiscanf_r+0x60>
 8004ec4:	466b      	mov	r3, sp
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	a941      	add	r1, sp, #260	; 0x104
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	e77d      	b.n	8004dce <__svfiscanf_r+0x172>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ed8:	bf18      	it	ne
 8004eda:	f04f 30ff 	movne.w	r0, #4294967295
 8004ede:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004ee8:	e7f9      	b.n	8004ede <__svfiscanf_r+0x282>
 8004eea:	bf00      	nop
 8004eec:	080056d9 	.word	0x080056d9
 8004ef0:	08005211 	.word	0x08005211
 8004ef4:	08005aa4 	.word	0x08005aa4
 8004ef8:	00000000 	.word	0x00000000

08004efc <_vfiscanf_r>:
 8004efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f00:	460c      	mov	r4, r1
 8004f02:	4616      	mov	r6, r2
 8004f04:	461f      	mov	r7, r3
 8004f06:	4605      	mov	r5, r0
 8004f08:	b118      	cbz	r0, 8004f12 <_vfiscanf_r+0x16>
 8004f0a:	6983      	ldr	r3, [r0, #24]
 8004f0c:	b90b      	cbnz	r3, 8004f12 <_vfiscanf_r+0x16>
 8004f0e:	f7ff fcf3 	bl	80048f8 <__sinit>
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <_vfiscanf_r+0x44>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	d108      	bne.n	8004f2a <_vfiscanf_r+0x2e>
 8004f18:	686c      	ldr	r4, [r5, #4]
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f26:	f7ff be99 	b.w	8004c5c <__svfiscanf_r>
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <_vfiscanf_r+0x48>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	d101      	bne.n	8004f34 <_vfiscanf_r+0x38>
 8004f30:	68ac      	ldr	r4, [r5, #8]
 8004f32:	e7f2      	b.n	8004f1a <_vfiscanf_r+0x1e>
 8004f34:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <_vfiscanf_r+0x4c>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	bf08      	it	eq
 8004f3a:	68ec      	ldreq	r4, [r5, #12]
 8004f3c:	e7ed      	b.n	8004f1a <_vfiscanf_r+0x1e>
 8004f3e:	bf00      	nop
 8004f40:	08005a64 	.word	0x08005a64
 8004f44:	08005a84 	.word	0x08005a84
 8004f48:	08005a44 	.word	0x08005a44

08004f4c <_scanf_chars>:
 8004f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f50:	4615      	mov	r5, r2
 8004f52:	688a      	ldr	r2, [r1, #8]
 8004f54:	4680      	mov	r8, r0
 8004f56:	460c      	mov	r4, r1
 8004f58:	b932      	cbnz	r2, 8004f68 <_scanf_chars+0x1c>
 8004f5a:	698a      	ldr	r2, [r1, #24]
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	f04f 32ff 	movne.w	r2, #4294967295
 8004f64:	2201      	moveq	r2, #1
 8004f66:	608a      	str	r2, [r1, #8]
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	06d1      	lsls	r1, r2, #27
 8004f6c:	bf5f      	itttt	pl
 8004f6e:	681a      	ldrpl	r2, [r3, #0]
 8004f70:	1d11      	addpl	r1, r2, #4
 8004f72:	6019      	strpl	r1, [r3, #0]
 8004f74:	6817      	ldrpl	r7, [r2, #0]
 8004f76:	2600      	movs	r6, #0
 8004f78:	69a3      	ldr	r3, [r4, #24]
 8004f7a:	b1db      	cbz	r3, 8004fb4 <_scanf_chars+0x68>
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d107      	bne.n	8004f90 <_scanf_chars+0x44>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	6962      	ldr	r2, [r4, #20]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	b9a3      	cbnz	r3, 8004fb4 <_scanf_chars+0x68>
 8004f8a:	2e00      	cmp	r6, #0
 8004f8c:	d132      	bne.n	8004ff4 <_scanf_chars+0xa8>
 8004f8e:	e006      	b.n	8004f9e <_scanf_chars+0x52>
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d007      	beq.n	8004fa4 <_scanf_chars+0x58>
 8004f94:	2e00      	cmp	r6, #0
 8004f96:	d12d      	bne.n	8004ff4 <_scanf_chars+0xa8>
 8004f98:	69a3      	ldr	r3, [r4, #24]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d12a      	bne.n	8004ff4 <_scanf_chars+0xa8>
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa4:	f000 fc52 	bl	800584c <__locale_ctype_ptr>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4418      	add	r0, r3
 8004fae:	7843      	ldrb	r3, [r0, #1]
 8004fb0:	071b      	lsls	r3, r3, #28
 8004fb2:	d4ef      	bmi.n	8004f94 <_scanf_chars+0x48>
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	06da      	lsls	r2, r3, #27
 8004fb8:	bf5e      	ittt	pl
 8004fba:	682b      	ldrpl	r3, [r5, #0]
 8004fbc:	781b      	ldrbpl	r3, [r3, #0]
 8004fbe:	703b      	strbpl	r3, [r7, #0]
 8004fc0:	682a      	ldr	r2, [r5, #0]
 8004fc2:	686b      	ldr	r3, [r5, #4]
 8004fc4:	f102 0201 	add.w	r2, r2, #1
 8004fc8:	602a      	str	r2, [r5, #0]
 8004fca:	68a2      	ldr	r2, [r4, #8]
 8004fcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fd0:	f102 32ff 	add.w	r2, r2, #4294967295
 8004fd4:	606b      	str	r3, [r5, #4]
 8004fd6:	f106 0601 	add.w	r6, r6, #1
 8004fda:	bf58      	it	pl
 8004fdc:	3701      	addpl	r7, #1
 8004fde:	60a2      	str	r2, [r4, #8]
 8004fe0:	b142      	cbz	r2, 8004ff4 <_scanf_chars+0xa8>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dcc8      	bgt.n	8004f78 <_scanf_chars+0x2c>
 8004fe6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fea:	4629      	mov	r1, r5
 8004fec:	4640      	mov	r0, r8
 8004fee:	4798      	blx	r3
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d0c1      	beq.n	8004f78 <_scanf_chars+0x2c>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	f013 0310 	ands.w	r3, r3, #16
 8004ffa:	d105      	bne.n	8005008 <_scanf_chars+0xbc>
 8004ffc:	68e2      	ldr	r2, [r4, #12]
 8004ffe:	3201      	adds	r2, #1
 8005000:	60e2      	str	r2, [r4, #12]
 8005002:	69a2      	ldr	r2, [r4, #24]
 8005004:	b102      	cbz	r2, 8005008 <_scanf_chars+0xbc>
 8005006:	703b      	strb	r3, [r7, #0]
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	441e      	add	r6, r3
 800500c:	6126      	str	r6, [r4, #16]
 800500e:	2000      	movs	r0, #0
 8005010:	e7c6      	b.n	8004fa0 <_scanf_chars+0x54>
	...

08005014 <_scanf_i>:
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	469a      	mov	sl, r3
 800501a:	4b74      	ldr	r3, [pc, #464]	; (80051ec <_scanf_i+0x1d8>)
 800501c:	460c      	mov	r4, r1
 800501e:	4683      	mov	fp, r0
 8005020:	4616      	mov	r6, r2
 8005022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005026:	b087      	sub	sp, #28
 8005028:	ab03      	add	r3, sp, #12
 800502a:	68a7      	ldr	r7, [r4, #8]
 800502c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005030:	4b6f      	ldr	r3, [pc, #444]	; (80051f0 <_scanf_i+0x1dc>)
 8005032:	69a1      	ldr	r1, [r4, #24]
 8005034:	4a6f      	ldr	r2, [pc, #444]	; (80051f4 <_scanf_i+0x1e0>)
 8005036:	2903      	cmp	r1, #3
 8005038:	bf08      	it	eq
 800503a:	461a      	moveq	r2, r3
 800503c:	1e7b      	subs	r3, r7, #1
 800503e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005042:	bf84      	itt	hi
 8005044:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005048:	60a3      	strhi	r3, [r4, #8]
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	9200      	str	r2, [sp, #0]
 800504e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005052:	bf88      	it	hi
 8005054:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005058:	f104 091c 	add.w	r9, r4, #28
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	bf8c      	ite	hi
 8005060:	197f      	addhi	r7, r7, r5
 8005062:	2700      	movls	r7, #0
 8005064:	464b      	mov	r3, r9
 8005066:	f04f 0800 	mov.w	r8, #0
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	6831      	ldr	r1, [r6, #0]
 800506e:	ab03      	add	r3, sp, #12
 8005070:	2202      	movs	r2, #2
 8005072:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005076:	7809      	ldrb	r1, [r1, #0]
 8005078:	f7fb f8aa 	bl	80001d0 <memchr>
 800507c:	9b01      	ldr	r3, [sp, #4]
 800507e:	b330      	cbz	r0, 80050ce <_scanf_i+0xba>
 8005080:	f1b8 0f01 	cmp.w	r8, #1
 8005084:	d15a      	bne.n	800513c <_scanf_i+0x128>
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	b92a      	cbnz	r2, 8005096 <_scanf_i+0x82>
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	2108      	movs	r1, #8
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	6061      	str	r1, [r4, #4]
 8005094:	6022      	str	r2, [r4, #0]
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800509c:	6022      	str	r2, [r4, #0]
 800509e:	68a2      	ldr	r2, [r4, #8]
 80050a0:	1e51      	subs	r1, r2, #1
 80050a2:	60a1      	str	r1, [r4, #8]
 80050a4:	b19a      	cbz	r2, 80050ce <_scanf_i+0xba>
 80050a6:	6832      	ldr	r2, [r6, #0]
 80050a8:	1c51      	adds	r1, r2, #1
 80050aa:	6031      	str	r1, [r6, #0]
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	1c5d      	adds	r5, r3, #1
 80050b2:	6873      	ldr	r3, [r6, #4]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	6073      	str	r3, [r6, #4]
 80050ba:	dc07      	bgt.n	80050cc <_scanf_i+0xb8>
 80050bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050c0:	4631      	mov	r1, r6
 80050c2:	4658      	mov	r0, fp
 80050c4:	4798      	blx	r3
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f040 8086 	bne.w	80051d8 <_scanf_i+0x1c4>
 80050cc:	462b      	mov	r3, r5
 80050ce:	f108 0801 	add.w	r8, r8, #1
 80050d2:	f1b8 0f03 	cmp.w	r8, #3
 80050d6:	d1c8      	bne.n	800506a <_scanf_i+0x56>
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	b90a      	cbnz	r2, 80050e0 <_scanf_i+0xcc>
 80050dc:	220a      	movs	r2, #10
 80050de:	6062      	str	r2, [r4, #4]
 80050e0:	6862      	ldr	r2, [r4, #4]
 80050e2:	4945      	ldr	r1, [pc, #276]	; (80051f8 <_scanf_i+0x1e4>)
 80050e4:	6960      	ldr	r0, [r4, #20]
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	1a89      	subs	r1, r1, r2
 80050ea:	f000 f92d 	bl	8005348 <__sccl>
 80050ee:	9b01      	ldr	r3, [sp, #4]
 80050f0:	f04f 0800 	mov.w	r8, #0
 80050f4:	461d      	mov	r5, r3
 80050f6:	68a3      	ldr	r3, [r4, #8]
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d03a      	beq.n	8005174 <_scanf_i+0x160>
 80050fe:	6831      	ldr	r1, [r6, #0]
 8005100:	6960      	ldr	r0, [r4, #20]
 8005102:	f891 c000 	ldrb.w	ip, [r1]
 8005106:	f810 000c 	ldrb.w	r0, [r0, ip]
 800510a:	2800      	cmp	r0, #0
 800510c:	d032      	beq.n	8005174 <_scanf_i+0x160>
 800510e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005112:	d121      	bne.n	8005158 <_scanf_i+0x144>
 8005114:	0510      	lsls	r0, r2, #20
 8005116:	d51f      	bpl.n	8005158 <_scanf_i+0x144>
 8005118:	f108 0801 	add.w	r8, r8, #1
 800511c:	b117      	cbz	r7, 8005124 <_scanf_i+0x110>
 800511e:	3301      	adds	r3, #1
 8005120:	3f01      	subs	r7, #1
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	6873      	ldr	r3, [r6, #4]
 8005126:	3b01      	subs	r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	6073      	str	r3, [r6, #4]
 800512c:	dd1b      	ble.n	8005166 <_scanf_i+0x152>
 800512e:	6833      	ldr	r3, [r6, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	6033      	str	r3, [r6, #0]
 8005134:	68a3      	ldr	r3, [r4, #8]
 8005136:	3b01      	subs	r3, #1
 8005138:	60a3      	str	r3, [r4, #8]
 800513a:	e7dc      	b.n	80050f6 <_scanf_i+0xe2>
 800513c:	f1b8 0f02 	cmp.w	r8, #2
 8005140:	d1ad      	bne.n	800509e <_scanf_i+0x8a>
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005148:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800514c:	d1bf      	bne.n	80050ce <_scanf_i+0xba>
 800514e:	2110      	movs	r1, #16
 8005150:	6061      	str	r1, [r4, #4]
 8005152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005156:	e7a1      	b.n	800509c <_scanf_i+0x88>
 8005158:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800515c:	6022      	str	r2, [r4, #0]
 800515e:	780b      	ldrb	r3, [r1, #0]
 8005160:	702b      	strb	r3, [r5, #0]
 8005162:	3501      	adds	r5, #1
 8005164:	e7de      	b.n	8005124 <_scanf_i+0x110>
 8005166:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800516a:	4631      	mov	r1, r6
 800516c:	4658      	mov	r0, fp
 800516e:	4798      	blx	r3
 8005170:	2800      	cmp	r0, #0
 8005172:	d0df      	beq.n	8005134 <_scanf_i+0x120>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	05d9      	lsls	r1, r3, #23
 8005178:	d50c      	bpl.n	8005194 <_scanf_i+0x180>
 800517a:	454d      	cmp	r5, r9
 800517c:	d908      	bls.n	8005190 <_scanf_i+0x17c>
 800517e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005182:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005186:	4632      	mov	r2, r6
 8005188:	4658      	mov	r0, fp
 800518a:	4798      	blx	r3
 800518c:	1e6f      	subs	r7, r5, #1
 800518e:	463d      	mov	r5, r7
 8005190:	454d      	cmp	r5, r9
 8005192:	d029      	beq.n	80051e8 <_scanf_i+0x1d4>
 8005194:	6822      	ldr	r2, [r4, #0]
 8005196:	f012 0210 	ands.w	r2, r2, #16
 800519a:	d113      	bne.n	80051c4 <_scanf_i+0x1b0>
 800519c:	702a      	strb	r2, [r5, #0]
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	9e00      	ldr	r6, [sp, #0]
 80051a2:	4649      	mov	r1, r9
 80051a4:	4658      	mov	r0, fp
 80051a6:	47b0      	blx	r6
 80051a8:	f8da 3000 	ldr.w	r3, [sl]
 80051ac:	6821      	ldr	r1, [r4, #0]
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	f8ca 2000 	str.w	r2, [sl]
 80051b4:	f011 0f20 	tst.w	r1, #32
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	d010      	beq.n	80051de <_scanf_i+0x1ca>
 80051bc:	6018      	str	r0, [r3, #0]
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	3301      	adds	r3, #1
 80051c2:	60e3      	str	r3, [r4, #12]
 80051c4:	eba5 0509 	sub.w	r5, r5, r9
 80051c8:	44a8      	add	r8, r5
 80051ca:	6925      	ldr	r5, [r4, #16]
 80051cc:	4445      	add	r5, r8
 80051ce:	6125      	str	r5, [r4, #16]
 80051d0:	2000      	movs	r0, #0
 80051d2:	b007      	add	sp, #28
 80051d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d8:	f04f 0800 	mov.w	r8, #0
 80051dc:	e7ca      	b.n	8005174 <_scanf_i+0x160>
 80051de:	07ca      	lsls	r2, r1, #31
 80051e0:	bf4c      	ite	mi
 80051e2:	8018      	strhmi	r0, [r3, #0]
 80051e4:	6018      	strpl	r0, [r3, #0]
 80051e6:	e7ea      	b.n	80051be <_scanf_i+0x1aa>
 80051e8:	2001      	movs	r0, #1
 80051ea:	e7f2      	b.n	80051d2 <_scanf_i+0x1be>
 80051ec:	080059ec 	.word	0x080059ec
 80051f0:	08005529 	.word	0x08005529
 80051f4:	08005641 	.word	0x08005641
 80051f8:	08005ab8 	.word	0x08005ab8

080051fc <lflush>:
 80051fc:	8983      	ldrh	r3, [r0, #12]
 80051fe:	f003 0309 	and.w	r3, r3, #9
 8005202:	2b09      	cmp	r3, #9
 8005204:	d101      	bne.n	800520a <lflush+0xe>
 8005206:	f7ff bb25 	b.w	8004854 <fflush>
 800520a:	2000      	movs	r0, #0
 800520c:	4770      	bx	lr
	...

08005210 <__srefill_r>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	460c      	mov	r4, r1
 8005214:	4605      	mov	r5, r0
 8005216:	b118      	cbz	r0, 8005220 <__srefill_r+0x10>
 8005218:	6983      	ldr	r3, [r0, #24]
 800521a:	b90b      	cbnz	r3, 8005220 <__srefill_r+0x10>
 800521c:	f7ff fb6c 	bl	80048f8 <__sinit>
 8005220:	4b3c      	ldr	r3, [pc, #240]	; (8005314 <__srefill_r+0x104>)
 8005222:	429c      	cmp	r4, r3
 8005224:	d10a      	bne.n	800523c <__srefill_r+0x2c>
 8005226:	686c      	ldr	r4, [r5, #4]
 8005228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800522c:	2300      	movs	r3, #0
 800522e:	6063      	str	r3, [r4, #4]
 8005230:	b293      	uxth	r3, r2
 8005232:	069e      	lsls	r6, r3, #26
 8005234:	d50c      	bpl.n	8005250 <__srefill_r+0x40>
 8005236:	f04f 30ff 	mov.w	r0, #4294967295
 800523a:	e067      	b.n	800530c <__srefill_r+0xfc>
 800523c:	4b36      	ldr	r3, [pc, #216]	; (8005318 <__srefill_r+0x108>)
 800523e:	429c      	cmp	r4, r3
 8005240:	d101      	bne.n	8005246 <__srefill_r+0x36>
 8005242:	68ac      	ldr	r4, [r5, #8]
 8005244:	e7f0      	b.n	8005228 <__srefill_r+0x18>
 8005246:	4b35      	ldr	r3, [pc, #212]	; (800531c <__srefill_r+0x10c>)
 8005248:	429c      	cmp	r4, r3
 800524a:	bf08      	it	eq
 800524c:	68ec      	ldreq	r4, [r5, #12]
 800524e:	e7eb      	b.n	8005228 <__srefill_r+0x18>
 8005250:	0758      	lsls	r0, r3, #29
 8005252:	d449      	bmi.n	80052e8 <__srefill_r+0xd8>
 8005254:	06d9      	lsls	r1, r3, #27
 8005256:	d405      	bmi.n	8005264 <__srefill_r+0x54>
 8005258:	2309      	movs	r3, #9
 800525a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	81a2      	strh	r2, [r4, #12]
 8005262:	e7e8      	b.n	8005236 <__srefill_r+0x26>
 8005264:	071a      	lsls	r2, r3, #28
 8005266:	d50b      	bpl.n	8005280 <__srefill_r+0x70>
 8005268:	4621      	mov	r1, r4
 800526a:	4628      	mov	r0, r5
 800526c:	f7ff fac8 	bl	8004800 <_fflush_r>
 8005270:	2800      	cmp	r0, #0
 8005272:	d1e0      	bne.n	8005236 <__srefill_r+0x26>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	60a0      	str	r0, [r4, #8]
 8005278:	f023 0308 	bic.w	r3, r3, #8
 800527c:	81a3      	strh	r3, [r4, #12]
 800527e:	61a0      	str	r0, [r4, #24]
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f043 0304 	orr.w	r3, r3, #4
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	b91b      	cbnz	r3, 8005294 <__srefill_r+0x84>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f7ff fbfc 	bl	8004a8c <__smakebuf_r>
 8005294:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005298:	b2be      	uxth	r6, r7
 800529a:	07b3      	lsls	r3, r6, #30
 800529c:	d00f      	beq.n	80052be <__srefill_r+0xae>
 800529e:	2301      	movs	r3, #1
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	4b1f      	ldr	r3, [pc, #124]	; (8005320 <__srefill_r+0x110>)
 80052a4:	491f      	ldr	r1, [pc, #124]	; (8005324 <__srefill_r+0x114>)
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	f006 0609 	and.w	r6, r6, #9
 80052ac:	f7ff fb90 	bl	80049d0 <_fwalk>
 80052b0:	2e09      	cmp	r6, #9
 80052b2:	81a7      	strh	r7, [r4, #12]
 80052b4:	d103      	bne.n	80052be <__srefill_r+0xae>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f7ff fa1b 	bl	80046f4 <__sflush_r>
 80052be:	6922      	ldr	r2, [r4, #16]
 80052c0:	6022      	str	r2, [r4, #0]
 80052c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80052c4:	6963      	ldr	r3, [r4, #20]
 80052c6:	6a21      	ldr	r1, [r4, #32]
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b0      	blx	r6
 80052cc:	2800      	cmp	r0, #0
 80052ce:	6060      	str	r0, [r4, #4]
 80052d0:	dc1d      	bgt.n	800530e <__srefill_r+0xfe>
 80052d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d6:	bf17      	itett	ne
 80052d8:	2200      	movne	r2, #0
 80052da:	f043 0320 	orreq.w	r3, r3, #32
 80052de:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80052e2:	6062      	strne	r2, [r4, #4]
 80052e4:	81a3      	strh	r3, [r4, #12]
 80052e6:	e7a6      	b.n	8005236 <__srefill_r+0x26>
 80052e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ea:	2900      	cmp	r1, #0
 80052ec:	d0cc      	beq.n	8005288 <__srefill_r+0x78>
 80052ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052f2:	4299      	cmp	r1, r3
 80052f4:	d002      	beq.n	80052fc <__srefill_r+0xec>
 80052f6:	4628      	mov	r0, r5
 80052f8:	f7ff fc08 	bl	8004b0c <_free_r>
 80052fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052fe:	6063      	str	r3, [r4, #4]
 8005300:	2000      	movs	r0, #0
 8005302:	6360      	str	r0, [r4, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0bf      	beq.n	8005288 <__srefill_r+0x78>
 8005308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800530e:	2000      	movs	r0, #0
 8005310:	e7fc      	b.n	800530c <__srefill_r+0xfc>
 8005312:	bf00      	nop
 8005314:	08005a64 	.word	0x08005a64
 8005318:	08005a84 	.word	0x08005a84
 800531c:	08005a44 	.word	0x08005a44
 8005320:	08005a40 	.word	0x08005a40
 8005324:	080051fd 	.word	0x080051fd

08005328 <_sbrk_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4c06      	ldr	r4, [pc, #24]	; (8005344 <_sbrk_r+0x1c>)
 800532c:	2300      	movs	r3, #0
 800532e:	4605      	mov	r5, r0
 8005330:	4608      	mov	r0, r1
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	f7fb fd8e 	bl	8000e54 <_sbrk>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_sbrk_r+0x1a>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	b103      	cbz	r3, 8005342 <_sbrk_r+0x1a>
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	200002c8 	.word	0x200002c8

08005348 <__sccl>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	780b      	ldrb	r3, [r1, #0]
 800534c:	2b5e      	cmp	r3, #94	; 0x5e
 800534e:	bf13      	iteet	ne
 8005350:	1c4a      	addne	r2, r1, #1
 8005352:	1c8a      	addeq	r2, r1, #2
 8005354:	784b      	ldrbeq	r3, [r1, #1]
 8005356:	2100      	movne	r1, #0
 8005358:	bf08      	it	eq
 800535a:	2101      	moveq	r1, #1
 800535c:	1e44      	subs	r4, r0, #1
 800535e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005362:	f804 1f01 	strb.w	r1, [r4, #1]!
 8005366:	42ac      	cmp	r4, r5
 8005368:	d1fb      	bne.n	8005362 <__sccl+0x1a>
 800536a:	b913      	cbnz	r3, 8005372 <__sccl+0x2a>
 800536c:	3a01      	subs	r2, #1
 800536e:	4610      	mov	r0, r2
 8005370:	bd70      	pop	{r4, r5, r6, pc}
 8005372:	f081 0401 	eor.w	r4, r1, #1
 8005376:	54c4      	strb	r4, [r0, r3]
 8005378:	1c51      	adds	r1, r2, #1
 800537a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800537e:	2d2d      	cmp	r5, #45	; 0x2d
 8005380:	f101 36ff 	add.w	r6, r1, #4294967295
 8005384:	460a      	mov	r2, r1
 8005386:	d006      	beq.n	8005396 <__sccl+0x4e>
 8005388:	2d5d      	cmp	r5, #93	; 0x5d
 800538a:	d0f0      	beq.n	800536e <__sccl+0x26>
 800538c:	b90d      	cbnz	r5, 8005392 <__sccl+0x4a>
 800538e:	4632      	mov	r2, r6
 8005390:	e7ed      	b.n	800536e <__sccl+0x26>
 8005392:	462b      	mov	r3, r5
 8005394:	e7ef      	b.n	8005376 <__sccl+0x2e>
 8005396:	780e      	ldrb	r6, [r1, #0]
 8005398:	2e5d      	cmp	r6, #93	; 0x5d
 800539a:	d0fa      	beq.n	8005392 <__sccl+0x4a>
 800539c:	42b3      	cmp	r3, r6
 800539e:	dcf8      	bgt.n	8005392 <__sccl+0x4a>
 80053a0:	3301      	adds	r3, #1
 80053a2:	429e      	cmp	r6, r3
 80053a4:	54c4      	strb	r4, [r0, r3]
 80053a6:	dcfb      	bgt.n	80053a0 <__sccl+0x58>
 80053a8:	3102      	adds	r1, #2
 80053aa:	e7e6      	b.n	800537a <__sccl+0x32>

080053ac <__sread>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	460c      	mov	r4, r1
 80053b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b4:	f000 fab0 	bl	8005918 <_read_r>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	bfab      	itete	ge
 80053bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053be:	89a3      	ldrhlt	r3, [r4, #12]
 80053c0:	181b      	addge	r3, r3, r0
 80053c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053c6:	bfac      	ite	ge
 80053c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80053ca:	81a3      	strhlt	r3, [r4, #12]
 80053cc:	bd10      	pop	{r4, pc}

080053ce <__swrite>:
 80053ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d2:	461f      	mov	r7, r3
 80053d4:	898b      	ldrh	r3, [r1, #12]
 80053d6:	05db      	lsls	r3, r3, #23
 80053d8:	4605      	mov	r5, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	4616      	mov	r6, r2
 80053de:	d505      	bpl.n	80053ec <__swrite+0x1e>
 80053e0:	2302      	movs	r3, #2
 80053e2:	2200      	movs	r2, #0
 80053e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e8:	f000 fa3e 	bl	8005868 <_lseek_r>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	4632      	mov	r2, r6
 80053fa:	463b      	mov	r3, r7
 80053fc:	4628      	mov	r0, r5
 80053fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005402:	f000 b9db 	b.w	80057bc <_write_r>

08005406 <__sseek>:
 8005406:	b510      	push	{r4, lr}
 8005408:	460c      	mov	r4, r1
 800540a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540e:	f000 fa2b 	bl	8005868 <_lseek_r>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	bf15      	itete	ne
 8005418:	6560      	strne	r0, [r4, #84]	; 0x54
 800541a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800541e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005422:	81a3      	strheq	r3, [r4, #12]
 8005424:	bf18      	it	ne
 8005426:	81a3      	strhne	r3, [r4, #12]
 8005428:	bd10      	pop	{r4, pc}

0800542a <__sclose>:
 800542a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542e:	f000 b9d7 	b.w	80057e0 <_close_r>

08005432 <_strtol_l.isra.0>:
 8005432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005436:	4680      	mov	r8, r0
 8005438:	4689      	mov	r9, r1
 800543a:	4692      	mov	sl, r2
 800543c:	461e      	mov	r6, r3
 800543e:	460f      	mov	r7, r1
 8005440:	463d      	mov	r5, r7
 8005442:	9808      	ldr	r0, [sp, #32]
 8005444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005448:	f000 f9fc 	bl	8005844 <__locale_ctype_ptr_l>
 800544c:	4420      	add	r0, r4
 800544e:	7843      	ldrb	r3, [r0, #1]
 8005450:	f013 0308 	ands.w	r3, r3, #8
 8005454:	d132      	bne.n	80054bc <_strtol_l.isra.0+0x8a>
 8005456:	2c2d      	cmp	r4, #45	; 0x2d
 8005458:	d132      	bne.n	80054c0 <_strtol_l.isra.0+0x8e>
 800545a:	787c      	ldrb	r4, [r7, #1]
 800545c:	1cbd      	adds	r5, r7, #2
 800545e:	2201      	movs	r2, #1
 8005460:	2e00      	cmp	r6, #0
 8005462:	d05d      	beq.n	8005520 <_strtol_l.isra.0+0xee>
 8005464:	2e10      	cmp	r6, #16
 8005466:	d109      	bne.n	800547c <_strtol_l.isra.0+0x4a>
 8005468:	2c30      	cmp	r4, #48	; 0x30
 800546a:	d107      	bne.n	800547c <_strtol_l.isra.0+0x4a>
 800546c:	782b      	ldrb	r3, [r5, #0]
 800546e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005472:	2b58      	cmp	r3, #88	; 0x58
 8005474:	d14f      	bne.n	8005516 <_strtol_l.isra.0+0xe4>
 8005476:	786c      	ldrb	r4, [r5, #1]
 8005478:	2610      	movs	r6, #16
 800547a:	3502      	adds	r5, #2
 800547c:	2a00      	cmp	r2, #0
 800547e:	bf14      	ite	ne
 8005480:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005484:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005488:	2700      	movs	r7, #0
 800548a:	fbb1 fcf6 	udiv	ip, r1, r6
 800548e:	4638      	mov	r0, r7
 8005490:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005494:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005498:	2b09      	cmp	r3, #9
 800549a:	d817      	bhi.n	80054cc <_strtol_l.isra.0+0x9a>
 800549c:	461c      	mov	r4, r3
 800549e:	42a6      	cmp	r6, r4
 80054a0:	dd23      	ble.n	80054ea <_strtol_l.isra.0+0xb8>
 80054a2:	1c7b      	adds	r3, r7, #1
 80054a4:	d007      	beq.n	80054b6 <_strtol_l.isra.0+0x84>
 80054a6:	4584      	cmp	ip, r0
 80054a8:	d31c      	bcc.n	80054e4 <_strtol_l.isra.0+0xb2>
 80054aa:	d101      	bne.n	80054b0 <_strtol_l.isra.0+0x7e>
 80054ac:	45a6      	cmp	lr, r4
 80054ae:	db19      	blt.n	80054e4 <_strtol_l.isra.0+0xb2>
 80054b0:	fb00 4006 	mla	r0, r0, r6, r4
 80054b4:	2701      	movs	r7, #1
 80054b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054ba:	e7eb      	b.n	8005494 <_strtol_l.isra.0+0x62>
 80054bc:	462f      	mov	r7, r5
 80054be:	e7bf      	b.n	8005440 <_strtol_l.isra.0+0xe>
 80054c0:	2c2b      	cmp	r4, #43	; 0x2b
 80054c2:	bf04      	itt	eq
 80054c4:	1cbd      	addeq	r5, r7, #2
 80054c6:	787c      	ldrbeq	r4, [r7, #1]
 80054c8:	461a      	mov	r2, r3
 80054ca:	e7c9      	b.n	8005460 <_strtol_l.isra.0+0x2e>
 80054cc:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80054d0:	2b19      	cmp	r3, #25
 80054d2:	d801      	bhi.n	80054d8 <_strtol_l.isra.0+0xa6>
 80054d4:	3c37      	subs	r4, #55	; 0x37
 80054d6:	e7e2      	b.n	800549e <_strtol_l.isra.0+0x6c>
 80054d8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80054dc:	2b19      	cmp	r3, #25
 80054de:	d804      	bhi.n	80054ea <_strtol_l.isra.0+0xb8>
 80054e0:	3c57      	subs	r4, #87	; 0x57
 80054e2:	e7dc      	b.n	800549e <_strtol_l.isra.0+0x6c>
 80054e4:	f04f 37ff 	mov.w	r7, #4294967295
 80054e8:	e7e5      	b.n	80054b6 <_strtol_l.isra.0+0x84>
 80054ea:	1c7b      	adds	r3, r7, #1
 80054ec:	d108      	bne.n	8005500 <_strtol_l.isra.0+0xce>
 80054ee:	2322      	movs	r3, #34	; 0x22
 80054f0:	f8c8 3000 	str.w	r3, [r8]
 80054f4:	4608      	mov	r0, r1
 80054f6:	f1ba 0f00 	cmp.w	sl, #0
 80054fa:	d107      	bne.n	800550c <_strtol_l.isra.0+0xda>
 80054fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005500:	b102      	cbz	r2, 8005504 <_strtol_l.isra.0+0xd2>
 8005502:	4240      	negs	r0, r0
 8005504:	f1ba 0f00 	cmp.w	sl, #0
 8005508:	d0f8      	beq.n	80054fc <_strtol_l.isra.0+0xca>
 800550a:	b10f      	cbz	r7, 8005510 <_strtol_l.isra.0+0xde>
 800550c:	f105 39ff 	add.w	r9, r5, #4294967295
 8005510:	f8ca 9000 	str.w	r9, [sl]
 8005514:	e7f2      	b.n	80054fc <_strtol_l.isra.0+0xca>
 8005516:	2430      	movs	r4, #48	; 0x30
 8005518:	2e00      	cmp	r6, #0
 800551a:	d1af      	bne.n	800547c <_strtol_l.isra.0+0x4a>
 800551c:	2608      	movs	r6, #8
 800551e:	e7ad      	b.n	800547c <_strtol_l.isra.0+0x4a>
 8005520:	2c30      	cmp	r4, #48	; 0x30
 8005522:	d0a3      	beq.n	800546c <_strtol_l.isra.0+0x3a>
 8005524:	260a      	movs	r6, #10
 8005526:	e7a9      	b.n	800547c <_strtol_l.isra.0+0x4a>

08005528 <_strtol_r>:
 8005528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800552a:	4c06      	ldr	r4, [pc, #24]	; (8005544 <_strtol_r+0x1c>)
 800552c:	4d06      	ldr	r5, [pc, #24]	; (8005548 <_strtol_r+0x20>)
 800552e:	6824      	ldr	r4, [r4, #0]
 8005530:	6a24      	ldr	r4, [r4, #32]
 8005532:	2c00      	cmp	r4, #0
 8005534:	bf08      	it	eq
 8005536:	462c      	moveq	r4, r5
 8005538:	9400      	str	r4, [sp, #0]
 800553a:	f7ff ff7a 	bl	8005432 <_strtol_l.isra.0>
 800553e:	b003      	add	sp, #12
 8005540:	bd30      	pop	{r4, r5, pc}
 8005542:	bf00      	nop
 8005544:	2000000c 	.word	0x2000000c
 8005548:	20000070 	.word	0x20000070

0800554c <_strtoul_l.isra.0>:
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	4680      	mov	r8, r0
 8005552:	4689      	mov	r9, r1
 8005554:	4692      	mov	sl, r2
 8005556:	461e      	mov	r6, r3
 8005558:	460f      	mov	r7, r1
 800555a:	463d      	mov	r5, r7
 800555c:	9808      	ldr	r0, [sp, #32]
 800555e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005562:	f000 f96f 	bl	8005844 <__locale_ctype_ptr_l>
 8005566:	4420      	add	r0, r4
 8005568:	7843      	ldrb	r3, [r0, #1]
 800556a:	f013 0308 	ands.w	r3, r3, #8
 800556e:	d130      	bne.n	80055d2 <_strtoul_l.isra.0+0x86>
 8005570:	2c2d      	cmp	r4, #45	; 0x2d
 8005572:	d130      	bne.n	80055d6 <_strtoul_l.isra.0+0x8a>
 8005574:	787c      	ldrb	r4, [r7, #1]
 8005576:	1cbd      	adds	r5, r7, #2
 8005578:	2101      	movs	r1, #1
 800557a:	2e00      	cmp	r6, #0
 800557c:	d05c      	beq.n	8005638 <_strtoul_l.isra.0+0xec>
 800557e:	2e10      	cmp	r6, #16
 8005580:	d109      	bne.n	8005596 <_strtoul_l.isra.0+0x4a>
 8005582:	2c30      	cmp	r4, #48	; 0x30
 8005584:	d107      	bne.n	8005596 <_strtoul_l.isra.0+0x4a>
 8005586:	782b      	ldrb	r3, [r5, #0]
 8005588:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800558c:	2b58      	cmp	r3, #88	; 0x58
 800558e:	d14e      	bne.n	800562e <_strtoul_l.isra.0+0xe2>
 8005590:	786c      	ldrb	r4, [r5, #1]
 8005592:	2610      	movs	r6, #16
 8005594:	3502      	adds	r5, #2
 8005596:	f04f 32ff 	mov.w	r2, #4294967295
 800559a:	2300      	movs	r3, #0
 800559c:	fbb2 f2f6 	udiv	r2, r2, r6
 80055a0:	fb06 fc02 	mul.w	ip, r6, r2
 80055a4:	ea6f 0c0c 	mvn.w	ip, ip
 80055a8:	4618      	mov	r0, r3
 80055aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80055ae:	2f09      	cmp	r7, #9
 80055b0:	d817      	bhi.n	80055e2 <_strtoul_l.isra.0+0x96>
 80055b2:	463c      	mov	r4, r7
 80055b4:	42a6      	cmp	r6, r4
 80055b6:	dd23      	ble.n	8005600 <_strtoul_l.isra.0+0xb4>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	db1e      	blt.n	80055fa <_strtoul_l.isra.0+0xae>
 80055bc:	4282      	cmp	r2, r0
 80055be:	d31c      	bcc.n	80055fa <_strtoul_l.isra.0+0xae>
 80055c0:	d101      	bne.n	80055c6 <_strtoul_l.isra.0+0x7a>
 80055c2:	45a4      	cmp	ip, r4
 80055c4:	db19      	blt.n	80055fa <_strtoul_l.isra.0+0xae>
 80055c6:	fb00 4006 	mla	r0, r0, r6, r4
 80055ca:	2301      	movs	r3, #1
 80055cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055d0:	e7eb      	b.n	80055aa <_strtoul_l.isra.0+0x5e>
 80055d2:	462f      	mov	r7, r5
 80055d4:	e7c1      	b.n	800555a <_strtoul_l.isra.0+0xe>
 80055d6:	2c2b      	cmp	r4, #43	; 0x2b
 80055d8:	bf04      	itt	eq
 80055da:	1cbd      	addeq	r5, r7, #2
 80055dc:	787c      	ldrbeq	r4, [r7, #1]
 80055de:	4619      	mov	r1, r3
 80055e0:	e7cb      	b.n	800557a <_strtoul_l.isra.0+0x2e>
 80055e2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80055e6:	2f19      	cmp	r7, #25
 80055e8:	d801      	bhi.n	80055ee <_strtoul_l.isra.0+0xa2>
 80055ea:	3c37      	subs	r4, #55	; 0x37
 80055ec:	e7e2      	b.n	80055b4 <_strtoul_l.isra.0+0x68>
 80055ee:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80055f2:	2f19      	cmp	r7, #25
 80055f4:	d804      	bhi.n	8005600 <_strtoul_l.isra.0+0xb4>
 80055f6:	3c57      	subs	r4, #87	; 0x57
 80055f8:	e7dc      	b.n	80055b4 <_strtoul_l.isra.0+0x68>
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	e7e5      	b.n	80055cc <_strtoul_l.isra.0+0x80>
 8005600:	2b00      	cmp	r3, #0
 8005602:	da09      	bge.n	8005618 <_strtoul_l.isra.0+0xcc>
 8005604:	2322      	movs	r3, #34	; 0x22
 8005606:	f8c8 3000 	str.w	r3, [r8]
 800560a:	f04f 30ff 	mov.w	r0, #4294967295
 800560e:	f1ba 0f00 	cmp.w	sl, #0
 8005612:	d107      	bne.n	8005624 <_strtoul_l.isra.0+0xd8>
 8005614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005618:	b101      	cbz	r1, 800561c <_strtoul_l.isra.0+0xd0>
 800561a:	4240      	negs	r0, r0
 800561c:	f1ba 0f00 	cmp.w	sl, #0
 8005620:	d0f8      	beq.n	8005614 <_strtoul_l.isra.0+0xc8>
 8005622:	b10b      	cbz	r3, 8005628 <_strtoul_l.isra.0+0xdc>
 8005624:	f105 39ff 	add.w	r9, r5, #4294967295
 8005628:	f8ca 9000 	str.w	r9, [sl]
 800562c:	e7f2      	b.n	8005614 <_strtoul_l.isra.0+0xc8>
 800562e:	2430      	movs	r4, #48	; 0x30
 8005630:	2e00      	cmp	r6, #0
 8005632:	d1b0      	bne.n	8005596 <_strtoul_l.isra.0+0x4a>
 8005634:	2608      	movs	r6, #8
 8005636:	e7ae      	b.n	8005596 <_strtoul_l.isra.0+0x4a>
 8005638:	2c30      	cmp	r4, #48	; 0x30
 800563a:	d0a4      	beq.n	8005586 <_strtoul_l.isra.0+0x3a>
 800563c:	260a      	movs	r6, #10
 800563e:	e7aa      	b.n	8005596 <_strtoul_l.isra.0+0x4a>

08005640 <_strtoul_r>:
 8005640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005642:	4c06      	ldr	r4, [pc, #24]	; (800565c <_strtoul_r+0x1c>)
 8005644:	4d06      	ldr	r5, [pc, #24]	; (8005660 <_strtoul_r+0x20>)
 8005646:	6824      	ldr	r4, [r4, #0]
 8005648:	6a24      	ldr	r4, [r4, #32]
 800564a:	2c00      	cmp	r4, #0
 800564c:	bf08      	it	eq
 800564e:	462c      	moveq	r4, r5
 8005650:	9400      	str	r4, [sp, #0]
 8005652:	f7ff ff7b 	bl	800554c <_strtoul_l.isra.0>
 8005656:	b003      	add	sp, #12
 8005658:	bd30      	pop	{r4, r5, pc}
 800565a:	bf00      	nop
 800565c:	2000000c 	.word	0x2000000c
 8005660:	20000070 	.word	0x20000070

08005664 <__submore>:
 8005664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005668:	460c      	mov	r4, r1
 800566a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800566c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005670:	4299      	cmp	r1, r3
 8005672:	d11d      	bne.n	80056b0 <__submore+0x4c>
 8005674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005678:	f7ff fa96 	bl	8004ba8 <_malloc_r>
 800567c:	b918      	cbnz	r0, 8005686 <__submore+0x22>
 800567e:	f04f 30ff 	mov.w	r0, #4294967295
 8005682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800568a:	63a3      	str	r3, [r4, #56]	; 0x38
 800568c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005690:	6360      	str	r0, [r4, #52]	; 0x34
 8005692:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005696:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800569a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800569e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80056a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80056a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80056aa:	6020      	str	r0, [r4, #0]
 80056ac:	2000      	movs	r0, #0
 80056ae:	e7e8      	b.n	8005682 <__submore+0x1e>
 80056b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80056b2:	0077      	lsls	r7, r6, #1
 80056b4:	463a      	mov	r2, r7
 80056b6:	f000 f908 	bl	80058ca <_realloc_r>
 80056ba:	4605      	mov	r5, r0
 80056bc:	2800      	cmp	r0, #0
 80056be:	d0de      	beq.n	800567e <__submore+0x1a>
 80056c0:	eb00 0806 	add.w	r8, r0, r6
 80056c4:	4601      	mov	r1, r0
 80056c6:	4632      	mov	r2, r6
 80056c8:	4640      	mov	r0, r8
 80056ca:	f000 f8f1 	bl	80058b0 <memcpy>
 80056ce:	f8c4 8000 	str.w	r8, [r4]
 80056d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80056d6:	e7e9      	b.n	80056ac <__submore+0x48>

080056d8 <_ungetc_r>:
 80056d8:	1c4b      	adds	r3, r1, #1
 80056da:	b570      	push	{r4, r5, r6, lr}
 80056dc:	4606      	mov	r6, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	4614      	mov	r4, r2
 80056e2:	d103      	bne.n	80056ec <_ungetc_r+0x14>
 80056e4:	f04f 35ff 	mov.w	r5, #4294967295
 80056e8:	4628      	mov	r0, r5
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	b118      	cbz	r0, 80056f6 <_ungetc_r+0x1e>
 80056ee:	6983      	ldr	r3, [r0, #24]
 80056f0:	b90b      	cbnz	r3, 80056f6 <_ungetc_r+0x1e>
 80056f2:	f7ff f901 	bl	80048f8 <__sinit>
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <_ungetc_r+0xd8>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	d12c      	bne.n	8005756 <_ungetc_r+0x7e>
 80056fc:	6874      	ldr	r4, [r6, #4]
 80056fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005702:	f023 0320 	bic.w	r3, r3, #32
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	b29b      	uxth	r3, r3
 800570a:	0759      	lsls	r1, r3, #29
 800570c:	d413      	bmi.n	8005736 <_ungetc_r+0x5e>
 800570e:	06da      	lsls	r2, r3, #27
 8005710:	d5e8      	bpl.n	80056e4 <_ungetc_r+0xc>
 8005712:	071b      	lsls	r3, r3, #28
 8005714:	d50b      	bpl.n	800572e <_ungetc_r+0x56>
 8005716:	4621      	mov	r1, r4
 8005718:	4630      	mov	r0, r6
 800571a:	f7ff f871 	bl	8004800 <_fflush_r>
 800571e:	2800      	cmp	r0, #0
 8005720:	d1e0      	bne.n	80056e4 <_ungetc_r+0xc>
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	60a0      	str	r0, [r4, #8]
 8005726:	f023 0308 	bic.w	r3, r3, #8
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	61a0      	str	r0, [r4, #24]
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005738:	6862      	ldr	r2, [r4, #4]
 800573a:	b2ed      	uxtb	r5, r5
 800573c:	b1e3      	cbz	r3, 8005778 <_ungetc_r+0xa0>
 800573e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005740:	4293      	cmp	r3, r2
 8005742:	dd12      	ble.n	800576a <_ungetc_r+0x92>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	1e5a      	subs	r2, r3, #1
 8005748:	6022      	str	r2, [r4, #0]
 800574a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800574e:	6863      	ldr	r3, [r4, #4]
 8005750:	3301      	adds	r3, #1
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	e7c8      	b.n	80056e8 <_ungetc_r+0x10>
 8005756:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <_ungetc_r+0xdc>)
 8005758:	429c      	cmp	r4, r3
 800575a:	d101      	bne.n	8005760 <_ungetc_r+0x88>
 800575c:	68b4      	ldr	r4, [r6, #8]
 800575e:	e7ce      	b.n	80056fe <_ungetc_r+0x26>
 8005760:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <_ungetc_r+0xe0>)
 8005762:	429c      	cmp	r4, r3
 8005764:	bf08      	it	eq
 8005766:	68f4      	ldreq	r4, [r6, #12]
 8005768:	e7c9      	b.n	80056fe <_ungetc_r+0x26>
 800576a:	4621      	mov	r1, r4
 800576c:	4630      	mov	r0, r6
 800576e:	f7ff ff79 	bl	8005664 <__submore>
 8005772:	2800      	cmp	r0, #0
 8005774:	d0e6      	beq.n	8005744 <_ungetc_r+0x6c>
 8005776:	e7b5      	b.n	80056e4 <_ungetc_r+0xc>
 8005778:	6921      	ldr	r1, [r4, #16]
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	b151      	cbz	r1, 8005794 <_ungetc_r+0xbc>
 800577e:	4299      	cmp	r1, r3
 8005780:	d208      	bcs.n	8005794 <_ungetc_r+0xbc>
 8005782:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005786:	42a9      	cmp	r1, r5
 8005788:	d104      	bne.n	8005794 <_ungetc_r+0xbc>
 800578a:	3b01      	subs	r3, #1
 800578c:	3201      	adds	r2, #1
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	6062      	str	r2, [r4, #4]
 8005792:	e7a9      	b.n	80056e8 <_ungetc_r+0x10>
 8005794:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800579c:	6363      	str	r3, [r4, #52]	; 0x34
 800579e:	2303      	movs	r3, #3
 80057a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80057a2:	4623      	mov	r3, r4
 80057a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	2301      	movs	r3, #1
 80057ac:	e7d1      	b.n	8005752 <_ungetc_r+0x7a>
 80057ae:	bf00      	nop
 80057b0:	08005a64 	.word	0x08005a64
 80057b4:	08005a84 	.word	0x08005a84
 80057b8:	08005a44 	.word	0x08005a44

080057bc <_write_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4c07      	ldr	r4, [pc, #28]	; (80057dc <_write_r+0x20>)
 80057c0:	4605      	mov	r5, r0
 80057c2:	4608      	mov	r0, r1
 80057c4:	4611      	mov	r1, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	6022      	str	r2, [r4, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f7fb fbec 	bl	8000fa8 <_write>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_write_r+0x1e>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	b103      	cbz	r3, 80057da <_write_r+0x1e>
 80057d8:	602b      	str	r3, [r5, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	200002c8 	.word	0x200002c8

080057e0 <_close_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4c06      	ldr	r4, [pc, #24]	; (80057fc <_close_r+0x1c>)
 80057e4:	2300      	movs	r3, #0
 80057e6:	4605      	mov	r5, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	f7fb fbfe 	bl	8000fec <_close>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_close_r+0x1a>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_close_r+0x1a>
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	200002c8 	.word	0x200002c8

08005800 <_fstat_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4c07      	ldr	r4, [pc, #28]	; (8005820 <_fstat_r+0x20>)
 8005804:	2300      	movs	r3, #0
 8005806:	4605      	mov	r5, r0
 8005808:	4608      	mov	r0, r1
 800580a:	4611      	mov	r1, r2
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	f7fb fbf9 	bl	8001004 <_fstat>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	d102      	bne.n	800581c <_fstat_r+0x1c>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	b103      	cbz	r3, 800581c <_fstat_r+0x1c>
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	bd38      	pop	{r3, r4, r5, pc}
 800581e:	bf00      	nop
 8005820:	200002c8 	.word	0x200002c8

08005824 <_isatty_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4c06      	ldr	r4, [pc, #24]	; (8005840 <_isatty_r+0x1c>)
 8005828:	2300      	movs	r3, #0
 800582a:	4605      	mov	r5, r0
 800582c:	4608      	mov	r0, r1
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	f7fb fbf8 	bl	8001024 <_isatty>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_isatty_r+0x1a>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	b103      	cbz	r3, 800583e <_isatty_r+0x1a>
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	200002c8 	.word	0x200002c8

08005844 <__locale_ctype_ptr_l>:
 8005844:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005848:	4770      	bx	lr
	...

0800584c <__locale_ctype_ptr>:
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <__locale_ctype_ptr+0x14>)
 800584e:	4a05      	ldr	r2, [pc, #20]	; (8005864 <__locale_ctype_ptr+0x18>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf08      	it	eq
 8005858:	4613      	moveq	r3, r2
 800585a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800585e:	4770      	bx	lr
 8005860:	2000000c 	.word	0x2000000c
 8005864:	20000070 	.word	0x20000070

08005868 <_lseek_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4c07      	ldr	r4, [pc, #28]	; (8005888 <_lseek_r+0x20>)
 800586c:	4605      	mov	r5, r0
 800586e:	4608      	mov	r0, r1
 8005870:	4611      	mov	r1, r2
 8005872:	2200      	movs	r2, #0
 8005874:	6022      	str	r2, [r4, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	f7fb fbdf 	bl	800103a <_lseek>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_lseek_r+0x1e>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	b103      	cbz	r3, 8005886 <_lseek_r+0x1e>
 8005884:	602b      	str	r3, [r5, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	200002c8 	.word	0x200002c8

0800588c <__ascii_mbtowc>:
 800588c:	b082      	sub	sp, #8
 800588e:	b901      	cbnz	r1, 8005892 <__ascii_mbtowc+0x6>
 8005890:	a901      	add	r1, sp, #4
 8005892:	b142      	cbz	r2, 80058a6 <__ascii_mbtowc+0x1a>
 8005894:	b14b      	cbz	r3, 80058aa <__ascii_mbtowc+0x1e>
 8005896:	7813      	ldrb	r3, [r2, #0]
 8005898:	600b      	str	r3, [r1, #0]
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	1c10      	adds	r0, r2, #0
 800589e:	bf18      	it	ne
 80058a0:	2001      	movne	r0, #1
 80058a2:	b002      	add	sp, #8
 80058a4:	4770      	bx	lr
 80058a6:	4610      	mov	r0, r2
 80058a8:	e7fb      	b.n	80058a2 <__ascii_mbtowc+0x16>
 80058aa:	f06f 0001 	mvn.w	r0, #1
 80058ae:	e7f8      	b.n	80058a2 <__ascii_mbtowc+0x16>

080058b0 <memcpy>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	1e43      	subs	r3, r0, #1
 80058b4:	440a      	add	r2, r1
 80058b6:	4291      	cmp	r1, r2
 80058b8:	d100      	bne.n	80058bc <memcpy+0xc>
 80058ba:	bd10      	pop	{r4, pc}
 80058bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058c4:	e7f7      	b.n	80058b6 <memcpy+0x6>

080058c6 <__malloc_lock>:
 80058c6:	4770      	bx	lr

080058c8 <__malloc_unlock>:
 80058c8:	4770      	bx	lr

080058ca <_realloc_r>:
 80058ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058cc:	4607      	mov	r7, r0
 80058ce:	4614      	mov	r4, r2
 80058d0:	460e      	mov	r6, r1
 80058d2:	b921      	cbnz	r1, 80058de <_realloc_r+0x14>
 80058d4:	4611      	mov	r1, r2
 80058d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058da:	f7ff b965 	b.w	8004ba8 <_malloc_r>
 80058de:	b922      	cbnz	r2, 80058ea <_realloc_r+0x20>
 80058e0:	f7ff f914 	bl	8004b0c <_free_r>
 80058e4:	4625      	mov	r5, r4
 80058e6:	4628      	mov	r0, r5
 80058e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ea:	f000 f834 	bl	8005956 <_malloc_usable_size_r>
 80058ee:	42a0      	cmp	r0, r4
 80058f0:	d20f      	bcs.n	8005912 <_realloc_r+0x48>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff f957 	bl	8004ba8 <_malloc_r>
 80058fa:	4605      	mov	r5, r0
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d0f2      	beq.n	80058e6 <_realloc_r+0x1c>
 8005900:	4631      	mov	r1, r6
 8005902:	4622      	mov	r2, r4
 8005904:	f7ff ffd4 	bl	80058b0 <memcpy>
 8005908:	4631      	mov	r1, r6
 800590a:	4638      	mov	r0, r7
 800590c:	f7ff f8fe 	bl	8004b0c <_free_r>
 8005910:	e7e9      	b.n	80058e6 <_realloc_r+0x1c>
 8005912:	4635      	mov	r5, r6
 8005914:	e7e7      	b.n	80058e6 <_realloc_r+0x1c>
	...

08005918 <_read_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4c07      	ldr	r4, [pc, #28]	; (8005938 <_read_r+0x20>)
 800591c:	4605      	mov	r5, r0
 800591e:	4608      	mov	r0, r1
 8005920:	4611      	mov	r1, r2
 8005922:	2200      	movs	r2, #0
 8005924:	6022      	str	r2, [r4, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	f7fb fb20 	bl	8000f6c <_read>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_read_r+0x1e>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	b103      	cbz	r3, 8005936 <_read_r+0x1e>
 8005934:	602b      	str	r3, [r5, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	200002c8 	.word	0x200002c8

0800593c <__ascii_wctomb>:
 800593c:	b149      	cbz	r1, 8005952 <__ascii_wctomb+0x16>
 800593e:	2aff      	cmp	r2, #255	; 0xff
 8005940:	bf85      	ittet	hi
 8005942:	238a      	movhi	r3, #138	; 0x8a
 8005944:	6003      	strhi	r3, [r0, #0]
 8005946:	700a      	strbls	r2, [r1, #0]
 8005948:	f04f 30ff 	movhi.w	r0, #4294967295
 800594c:	bf98      	it	ls
 800594e:	2001      	movls	r0, #1
 8005950:	4770      	bx	lr
 8005952:	4608      	mov	r0, r1
 8005954:	4770      	bx	lr

08005956 <_malloc_usable_size_r>:
 8005956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595a:	1f18      	subs	r0, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	bfbc      	itt	lt
 8005960:	580b      	ldrlt	r3, [r1, r0]
 8005962:	18c0      	addlt	r0, r0, r3
 8005964:	4770      	bx	lr
	...

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
